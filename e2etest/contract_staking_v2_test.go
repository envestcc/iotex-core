package e2etest

import (
	"context"
	"encoding/hex"
	"math/big"
	"strings"
	"testing"
	"time"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common"
	"github.com/mohae/deepcopy"
	"github.com/stretchr/testify/require"
	"google.golang.org/protobuf/proto"

	"github.com/iotexproject/go-pkgs/hash"
	"github.com/iotexproject/iotex-proto/golang/iotexapi"
	"github.com/iotexproject/iotex-proto/golang/iotextypes"

	"github.com/iotexproject/iotex-core/action"
	"github.com/iotexproject/iotex-core/actpool"
	"github.com/iotexproject/iotex-core/api"
	"github.com/iotexproject/iotex-core/blockchain"
	"github.com/iotexproject/iotex-core/blockchain/genesis"
	"github.com/iotexproject/iotex-core/config"
	"github.com/iotexproject/iotex-core/server/itx"
	"github.com/iotexproject/iotex-core/test/identityset"
	"github.com/iotexproject/iotex-core/testutil"
)

var (
	stakingContractV2ByteCode = `60a060405234801562000010575f80fd5b5060405162002f9e38038062002f9e83398101604081905262000033916200013a565b60405180604001604052806009815260200168109d58dad95d13919560ba1b815250604051806040016040528060038152602001621092d560ea1b815250815f908162000081919062000216565b50600162000090828262000216565b505050620000ad620000a7620000e560201b60201c565b620000e9565b6006805460ff60a01b19169055608091909152600980546001600160a01b0319166001600160a01b03909216919091179055620002de565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f80604083850312156200014c575f80fd5b825160208401519092506001600160a01b03811681146200016b575f80fd5b809150509250929050565b634e487b7160e01b5f52604160045260245ffd5b600181811c908216806200019f57607f821691505b602082108103620001be57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111562000211575f81815260208120601f850160051c81016020861015620001ec5750805b601f850160051c820191505b818110156200020d57828155600101620001f8565b5050505b505050565b81516001600160401b0381111562000232576200023262000176565b6200024a816200024384546200018a565b84620001c4565b602080601f83116001811462000280575f8415620002685750858301515b5f19600386901b1c1916600185901b1785556200020d565b5f85815260208120601f198616915b82811015620002b0578886015182559484019460019091019084016200028f565b5085821015620002ce57878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b608051612ca0620002fe5f395f81816107200152611bde0152612ca05ff3fe60806040526004361061025e575f3560e01c8063715018a61161013f578063b88d4fde116100b3578063ddbcb5fa11610078578063ddbcb5fa1461070f578063e449f34114610742578063e985e9c514610761578063eec7ee73146107a8578063f0b56b5d146107bb578063f2fde38b146107cf575f80fd5b8063b88d4fde1461068b578063b8f4bd7b146106aa578063bbe33ea5146106c9578063c87b56dd146106dc578063d0949f99146106fb575f80fd5b80638da5cb5b116101045780638da5cb5b146105e957806393b6ef591461060657806395d89b411461062557806398ca3b7614610639578063a22cb46514610658578063b1724b4614610677575f80fd5b8063715018a6146105865780637acb77571461059a5780638456cb59146105ad57806384ac79b0146105c1578063863e76db146105d4575f80fd5b806338af3eed116101d65780635ceb8b5b1161019b5780635ceb8b5b146104cb5780635d36598f146104ea5780636198e339146105095780636352211e1461052857806370a0823114610547578063711563d414610566575f80fd5b806338af3eed146103f65780633f4ba83a1461041557806342842e0e14610429578063431cd92a146104485780635c975abb146104ad575f80fd5b8063095ea7b311610227578063095ea7b31461033c5780630cdd53f61461035b5780630f5b2ca51461037a5780631338736f1461039957806323b872dd146103b85780632e17de78146103d7575f80fd5b8062f714ce1461026257806301ffc9a71461028357806303459b16146102b757806306fdde03146102e4578063081812fc14610305575b5f80fd5b34801561026d575f80fd5b5061028161027c3660046124ca565b6107ee565b005b34801561028e575f80fd5b506102a261029d36600461250d565b61080f565b60405190151581526020015b60405180910390f35b3480156102c2575f80fd5b506102d66102d1366004612528565b610860565b6040519081526020016102ae565b3480156102ef575f80fd5b506102f8610884565b6040516102ae919061258c565b348015610310575f80fd5b5061032461031f366004612528565b610913565b6040516001600160a01b0390911681526020016102ae565b348015610347575f80fd5b5061028161035636600461259e565b610938565b348015610366575f80fd5b506102816103753660046125c8565b610a4c565b348015610385575f80fd5b506102816103943660046124ca565b610b13565b3480156103a4575f80fd5b506102816103b33660046125c8565b610b29565b3480156103c3575f80fd5b506102816103d23660046125e8565b610b44565b3480156103e2575f80fd5b506102816103f1366004612528565b610b75565b348015610401575f80fd5b50600954610324906001600160a01b031681565b348015610420575f80fd5b50610281610b89565b348015610434575f80fd5b506102816104433660046125e8565b610b9b565b348015610453575f80fd5b50610467610462366004612528565b610bb5565b6040516102ae9190815181526020808301519082015260408083015190820152606080830151908201526080918201516001600160a01b03169181019190915260a00190565b3480156104b8575f80fd5b50600654600160a01b900460ff166102a2565b3480156104d6575f80fd5b506102816104e536600461266e565b610c4b565b3480156104f5575f80fd5b506102816105043660046126b6565b610c96565b348015610514575f80fd5b50610281610523366004612528565b610cd1565b348015610533575f80fd5b50610324610542366004612528565b610ce2565b348015610552575f80fd5b506102d66105613660046126f5565b610d41565b610579610574366004612710565b610dc5565b6040516102ae919061274c565b348015610591575f80fd5b50610281610e92565b6102d66105a83660046124ca565b610ea3565b3480156105b8575f80fd5b50610281610ed2565b6102816105cf3660046125c8565b610ee2565b3480156105df575f80fd5b506102d661438081565b3480156105f4575f80fd5b506006546001600160a01b0316610324565b348015610611575f80fd5b506102d6610620366004612528565b610f9f565b348015610630575f80fd5b506102f8610fdd565b348015610644575f80fd5b5061028161065336600461278f565b610fec565b348015610663575f80fd5b506102816106723660046127e2565b611028565b348015610682575f80fd5b506102d6611033565b348015610696575f80fd5b506102816106a5366004612857565b61104f565b3480156106b5575f80fd5b506102816106c436600461278f565b611081565b6102816106d736600461266e565b6110bd565b3480156106e7575f80fd5b506102f86106f6366004612528565b6111f0565b348015610706575f80fd5b506102d65f1981565b34801561071a575f80fd5b506102d67f000000000000000000000000000000000000000000000000000000000000000081565b34801561074d575f80fd5b5061028161075c3660046126b6565b61125f565b34801561076c575f80fd5b506102a261077b366004612914565b6001600160a01b039182165f90815260056020908152604080832093909416825291909152205460ff1690565b6105796107b6366004612940565b61129a565b3480156107c6575f80fd5b506102d6611384565b3480156107da575f80fd5b506102816107e93660046126f5565b611391565b6107f6611407565b8161080081611454565b61080a838361148e565b505050565b5f6001600160e01b031982166380ac58cd60e01b148061083f57506001600160e01b03198216635b5e139f60e01b145b8061085a57506301ffc9a760e01b6001600160e01b03198316145b92915050565b5f61086a82611522565b5f8281526008602052604090206003015461085a90611580565b60605f805461089290612a01565b80601f01602080910402602001604051908101604052809291908181526020018280546108be90612a01565b80156109095780601f106108e057610100808354040283529160200191610909565b820191905f5260205f20905b8154815290600101906020018083116108ec57829003601f168201915b5050505050905090565b5f61091d82611522565b505f908152600460205260409020546001600160a01b031690565b5f61094282610ce2565b9050806001600160a01b0316836001600160a01b0316036109b45760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806109d057506109d0813361077b565b610a425760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016109ab565b61080a83836115d4565b81610a5681611454565b5f8381526008602052604090206003810154610a7190611641565b8054831180610a7e575082155b15610a9c576040516359b9300b60e11b815260040160405180910390fd5b82815f015f828254610aae9190612a4d565b9091555050600954610ac9906001600160a01b031684611662565b6009546040518481526001600160a01b039091169085907f1b606d34afacd55873aba0fd274841a10c63e18455f2dffebad2fc60a36b2c839060200160405180910390a350505050565b610b1b611407565b610b2582826116d2565b5050565b610b31611407565b610b3a81611779565b610b2582826117c7565b610b4e3382611857565b610b6a5760405162461bcd60e51b81526004016109ab90612a60565b61080a8383836118d3565b610b7d611407565b610b8681611a42565b50565b610b91611ad3565b610b99611b2d565b565b61080a83838360405180602001604052805f81525061104f565b610beb6040518060a001604052805f81526020015f81526020015f81526020015f81526020015f6001600160a01b031681525090565b610bf482611522565b505f90815260086020908152604091829020825160a08101845281548152600182015492810192909252600281015492820192909252600382015460608201526004909101546001600160a01b0316608082015290565b610c53611407565b610c5c81611779565b5f5b82811015610c9057610c88848483818110610c7b57610c7b612aad565b90506020020135836117c7565b600101610c5e565b50505050565b610c9e611407565b5f5b8181101561080a57610cc9838383818110610cbd57610cbd612aad565b90506020020135611b82565b600101610ca0565b610cd9611407565b610b8681611b82565b5f818152600260205260408120546001600160a01b03168061085a5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016109ab565b5f6001600160a01b038216610daa5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016109ab565b506001600160a01b03165f9081526003602052604090205490565b6060610dcf611407565b610dd885611bdc565b610de184611779565b34610dec8387612ac1565b14610e0a576040516359b9300b60e11b815260040160405180910390fd5b8167ffffffffffffffff811115610e2357610e23612812565b604051908082528060200260200182016040528015610e4c578160200160208202803683370190505b5090505f5b82811015610e8957610e64868686611c1d565b828281518110610e7657610e76612aad565b6020908102919091010152600101610e51565b50949350505050565b610e9a611ad3565b610b995f611d05565b5f610eac611407565b34610eb681611bdc565b610ebf84611779565b610eca818585611c1d565b949350505050565b610eda611ad3565b610b99611d56565b610eea611407565b81610ef481611454565b610efd82611779565b5f8381526008602052604090206002810154610f1890611d99565b8060010154831015610f3d5760405163257a8d4b60e11b815260040160405180910390fd5b34815f015f828254610f4f9190612ad8565b9091555050600181018390558054604080519182526020820185905285917fd29e04160a74f0dbab5e7b82ef0392d86d11ac2939e5883eb3353be4cfedb83e91015b60405180910390a250505050565b5f610fa982611522565b5f8281526008602052604090206003810154610fc490611641565b610fd681600201548260010154611dba565b9392505050565b60606001805461089290612a01565b610ff4611407565b5f5b82811015610c905761102084848381811061101357611013612aad565b90506020020135836116d2565b600101610ff6565b610b25338383611df1565b61104161438061016d612ac1565b61104c906003612ac1565b81565b6110593383611857565b6110755760405162461bcd60e51b81526004016109ab90612a60565b610c9084848484611ebe565b611089611407565b5f5b82811015610c90576110b58484838181106110a8576110a8612aad565b905060200201358361148e565b60010161108b565b6110c5611407565b600182116110e657604051637e878a5f60e11b815260040160405180910390fd5b6110ef81611779565b345f80845b80156111e7575f190186868281811061110f5761110f612aad565b90506020020135925061112183611454565b5f838152600860205260409020600381015490925061113f90611641565b61115182600201548360010154611dba565b8510156111715760405163257a8d4b60e11b815260040160405180910390fd5b815461117d9085612ad8565b935080156111935761118e83611ef1565b6110f4565b5f196002830155838255600182018590556040517fb3f4c8ca702dbbd32d9a25ce17b1942a5060284d9d69fc4fcac8fb0397891b12906111da908990899088908a90612aeb565b60405180910390a16110f4565b50505050505050565b60606111fb82611522565b5f61121060408051602081019091525f815290565b90505f81511161122e5760405180602001604052805f815250610fd6565b8061123884611f90565b604051602001611249929190612b2f565b6040516020818303038152906040529392505050565b611267611407565b5f5b8181101561080a5761129283838381811061128657611286612aad565b90506020020135611a42565b600101611269565b60606112a4611407565b6112ad84611bdc565b6112b683611779565b348251856112c49190612ac1565b146112e2576040516359b9300b60e11b815260040160405180910390fd5b815167ffffffffffffffff8111156112fc576112fc612812565b604051908082528060200260200182016040528015611325578160200160208202803683370190505b5090505f5b825181101561137c57611357858585848151811061134a5761134a612aad565b6020026020010151611c1d565b82828151811061136957611369612aad565b602090810291909101015260010161132a565b509392505050565b61104c6143806003612ac1565b611399611ad3565b6001600160a01b0381166113fe5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016109ab565b610b8681611d05565b600654600160a01b900460ff1615610b995760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016109ab565b61145d81610ce2565b6001600160a01b0316336001600160a01b031614610b8657604051630da4973960e31b815260040160405180910390fd5b8161149881611454565b5f83815260086020526040902060038101546114b390611580565b156114d157604051634e395b8560e01b815260040160405180910390fd5b6114da84611ef1565b6114e783825f0154611662565b6040516001600160a01b0384169085907fd964a27d45f595739c13d8b1160b57491050cacf3a2e5602207277d6228f64ee905f90a350505050565b5f818152600260205260409020546001600160a01b0316610b865760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016109ab565b5f5f1982036115a257604051636263fd5f60e11b815260040160405180910390fd5b5f6115b06143806003612ac1565b6115ba9084612ad8565b90504381116115cb57505f92915050565b43900392915050565b5f81815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061160882610ce2565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b5f198114610b86576040516343febe2b60e01b815260040160405180910390fd5b5f826001600160a01b0316826040515f6040518083038185875af1925050503d805f81146116ab576040519150601f19603f3d011682016040523d82523d5f602084013e6116b0565b606091505b505090508061080a57604051639a7058e160e01b815260040160405180910390fd5b816116dc81611454565b5f83815260086020526040902060038101546116f790611641565b60048101546001600160a01b0380851691160361172757604051637e878a5f60e11b815260040160405180910390fd5b6004810180546001600160a01b0319166001600160a01b03851690811790915560405190815284907f6f08c7e76d830d5f3d0a18fd27f4d8c0049b24a8689ddb39625e0864d894a9c190602001610f91565b61178561438082612b5d565b1515806117a9575061179b61438061016d612ac1565b6117a6906003612ac1565b81115b15610b865760405163257a8d4b60e11b815260040160405180910390fd5b816117d181611454565b5f83815260086020526040902060038101546117ec90611641565b6117fe81600201548260010154611dba565b83101561181e5760405163257a8d4b60e11b815260040160405180910390fd5b5f19600282015560405183815284907f907fece23ce39fbcbceb71e515043fe29408353fbb393b25b35eb8a70a4bad0b90602001610f91565b5f8061186283610ce2565b9050806001600160a01b0316846001600160a01b031614806118a857506001600160a01b038082165f9081526005602090815260408083209388168352929052205460ff165b80610eca5750836001600160a01b03166118c184610913565b6001600160a01b031614949350505050565b826001600160a01b03166118e682610ce2565b6001600160a01b03161461190c5760405162461bcd60e51b81526004016109ab90612b7c565b6001600160a01b03821661196e5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016109ab565b61197b8383836001612020565b826001600160a01b031661198e82610ce2565b6001600160a01b0316146119b45760405162461bcd60e51b81526004016109ab90612b7c565b5f81815260046020908152604080832080546001600160a01b03199081169091556001600160a01b038781168086526003855283862080545f1901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b80611a4c81611454565b5f8281526008602052604090206003810154611a6790611641565b611a7981600201548260010154611dba565b15611a9757604051634e395b8560e01b815260040160405180910390fd5b4360028201819055600382015560405183907f11725367022c3ff288940f4b5473aa61c2da6a24af7363a1128ee2401e8983b2905f90a2505050565b6006546001600160a01b03163314610b995760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109ab565b611b3561202c565b6006805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b80611b8c81611454565b5f8281526008602052604090206002810154611ba790611d99565b43600282015560405183907ff27b6ce5b2f5e68ddb2fd95a8a909d4ecf1daaac270935fff052feacb24f1842905f90a2505050565b7f0000000000000000000000000000000000000000000000000000000000000000811015610b86576040516359b9300b60e11b815260040160405180910390fd5b5f80611c2b60075460010190565b60078190556040805160a08101825287815260208082018881525f19838501818152606085019182526001600160a01b038a8116608087019081525f8981526008909652969094209451855591516001850155905160028401555160038301559151600490910180546001600160a01b031916919092161790559050611cb1338261207c565b604080516001600160a01b03851681526020810187905290810185905281907f17700ceb1658b18206f427c1578048e87504106b14ec69e9b4586d9a95174a329060600160405180910390a2949350505050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b611d5e611407565b6006805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611b653390565b5f198114610b865760405163da808c7560e01b815260040160405180910390fd5b5f5f198303611dca57508061085a565b5f611dd58385612ad8565b9050438111611de7575f91505061085a565b4390039392505050565b816001600160a01b0316836001600160a01b031603611e525760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016109ab565b6001600160a01b038381165f81815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611ec98484846118d3565b611ed584848484612095565b610c905760405162461bcd60e51b81526004016109ab90612bc1565b5f611efb82610ce2565b9050611f0a815f846001612020565b611f1382610ce2565b5f83815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0385168085526003845282852080545f190190558785526002909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60605f611f9c83612192565b60010190505f8167ffffffffffffffff811115611fbb57611fbb612812565b6040519080825280601f01601f191660200182016040528015611fe5576020820181803683370190505b5090508181016020015b5f19016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084611fef57509392505050565b610c9084848484612269565b600654600160a01b900460ff16610b995760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016109ab565b610b25828260405180602001604052805f8152506122ef565b5f6001600160a01b0384163b1561218757604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906120d8903390899088908890600401612c13565b6020604051808303815f875af1925050508015612112575060408051601f3d908101601f1916820190925261210f91810190612c4f565b60015b61216d573d80801561213f576040519150601f19603f3d011682016040523d82523d5f602084013e612144565b606091505b5080515f036121655760405162461bcd60e51b81526004016109ab90612bc1565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610eca565b506001949350505050565b5f8072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106121d05772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106121fc576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061221a57662386f26fc10000830492506010015b6305f5e1008310612232576305f5e100830492506008015b612710831061224657612710830492506004015b60648310612258576064830492506002015b600a831061085a5760010192915050565b6001811115610c90576001600160a01b038416156122ae576001600160a01b0384165f90815260036020526040812080548392906122a8908490612a4d565b90915550505b6001600160a01b03831615610c90576001600160a01b0383165f90815260036020526040812080548392906122e4908490612ad8565b909155505050505050565b6122f98383612321565b6123055f848484612095565b61080a5760405162461bcd60e51b81526004016109ab90612bc1565b6001600160a01b0382166123775760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016109ab565b5f818152600260205260409020546001600160a01b0316156123db5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016109ab565b6123e85f83836001612020565b5f818152600260205260409020546001600160a01b03161561244c5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016109ab565b6001600160a01b0382165f81815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160a01b0381168114610b86575f80fd5b5f80604083850312156124db575f80fd5b8235915060208301356124ed816124b6565b809150509250929050565b6001600160e01b031981168114610b86575f80fd5b5f6020828403121561251d575f80fd5b8135610fd6816124f8565b5f60208284031215612538575f80fd5b5035919050565b5f5b83811015612559578181015183820152602001612541565b50505f910152565b5f815180845261257881602086016020860161253f565b601f01601f19169290920160200192915050565b602081525f610fd66020830184612561565b5f80604083850312156125af575f80fd5b82356125ba816124b6565b946020939093013593505050565b5f80604083850312156125d9575f80fd5b50508035926020909101359150565b5f805f606084860312156125fa575f80fd5b8335612605816124b6565b92506020840135612615816124b6565b929592945050506040919091013590565b5f8083601f840112612636575f80fd5b50813567ffffffffffffffff81111561264d575f80fd5b6020830191508360208260051b8501011115612667575f80fd5b9250929050565b5f805f60408486031215612680575f80fd5b833567ffffffffffffffff811115612696575f80fd5b6126a286828701612626565b909790965060209590950135949350505050565b5f80602083850312156126c7575f80fd5b823567ffffffffffffffff8111156126dd575f80fd5b6126e985828601612626565b90969095509350505050565b5f60208284031215612705575f80fd5b8135610fd6816124b6565b5f805f8060808587031215612723575f80fd5b8435935060208501359250604085013561273c816124b6565b9396929550929360600135925050565b602080825282518282018190525f9190848201906040850190845b8181101561278357835183529284019291840191600101612767565b50909695505050505050565b5f805f604084860312156127a1575f80fd5b833567ffffffffffffffff8111156127b7575f80fd5b6127c386828701612626565b90945092505060208401356127d7816124b6565b809150509250925092565b5f80604083850312156127f3575f80fd5b82356127fe816124b6565b9150602083013580151581146124ed575f80fd5b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561284f5761284f612812565b604052919050565b5f805f806080858703121561286a575f80fd5b8435612875816124b6565b9350602085810135612886816124b6565b935060408601359250606086013567ffffffffffffffff808211156128a9575f80fd5b818801915088601f8301126128bc575f80fd5b8135818111156128ce576128ce612812565b6128e0601f8201601f19168501612826565b915080825289848285010111156128f5575f80fd5b80848401858401375f8482840101525080935050505092959194509250565b5f8060408385031215612925575f80fd5b8235612930816124b6565b915060208301356124ed816124b6565b5f805f60608486031215612952575f80fd5b833592506020808501359250604085013567ffffffffffffffff80821115612978575f80fd5b818701915087601f83011261298b575f80fd5b81358181111561299d5761299d612812565b8060051b91506129ae848301612826565b818152918301840191848101908a8411156129c7575f80fd5b938501935b838510156129f157843592506129e1836124b6565b82825293850193908501906129cc565b8096505050505050509250925092565b600181811c90821680612a1557607f821691505b602082108103612a3357634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52601160045260245ffd5b8181038181111561085a5761085a612a39565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b634e487b7160e01b5f52603260045260245ffd5b808202811582820484141761085a5761085a612a39565b8082018082111561085a5761085a612a39565b606080825281018490525f6001600160fb1b03851115612b09575f80fd5b8460051b8087608085013760208301949094525060408101919091520160800192915050565b5f8351612b4081846020880161253f565b835190830190612b5481836020880161253f565b01949350505050565b5f82612b7757634e487b7160e01b5f52601260045260245ffd5b500690565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190525f90612c4590830184612561565b9695505050505050565b5f60208284031215612c5f575f80fd5b8151610fd6816124f856fea2646970667358221220acb0032aa3353e654b97d7240b3a30930288971f05c3c3edf68dce125192a49d64736f6c63430008140033`
	stakingContractV2ABIJSON  = `[
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_minAmount",
					"type": "uint256"
				},
				{
					"internalType": "address payable",
					"name": "_beneficiary",
					"type": "address"
				}
			],
			"stateMutability": "nonpayable",
			"type": "constructor"
		},
		{
			"inputs": [],
			"name": "ErrInvalidAmount",
			"type": "error"
		},
		{
			"inputs": [],
			"name": "ErrInvalidDuration",
			"type": "error"
		},
		{
			"inputs": [],
			"name": "ErrInvalidParameter",
			"type": "error"
		},
		{
			"inputs": [],
			"name": "ErrNotLockedBucket",
			"type": "error"
		},
		{
			"inputs": [],
			"name": "ErrNotOwner",
			"type": "error"
		},
		{
			"inputs": [],
			"name": "ErrNotReady",
			"type": "error"
		},
		{
			"inputs": [],
			"name": "ErrNotStakedBucket",
			"type": "error"
		},
		{
			"inputs": [],
			"name": "ErrNotUnstakedBucket",
			"type": "error"
		},
		{
			"inputs": [],
			"name": "ErrTransferFailed",
			"type": "error"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "approved",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "Approval",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "operator",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "bool",
					"name": "approved",
					"type": "bool"
				}
			],
			"name": "ApprovalForAll",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "bucketId",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "amount",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "duration",
					"type": "uint256"
				}
			],
			"name": "BucketExpanded",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "bucketId",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "address",
					"name": "newDelegate",
					"type": "address"
				}
			],
			"name": "DelegateChanged",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "bucketId",
					"type": "uint256"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "beneficiary",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "amount",
					"type": "uint256"
				}
			],
			"name": "Donated",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "bucketId",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "duration",
					"type": "uint256"
				}
			],
			"name": "Locked",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "uint256[]",
					"name": "bucketIds",
					"type": "uint256[]"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "amount",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "duration",
					"type": "uint256"
				}
			],
			"name": "Merged",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "previousOwner",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "newOwner",
					"type": "address"
				}
			],
			"name": "OwnershipTransferred",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "Paused",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "bucketId",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "address",
					"name": "delegate",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "amount",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "duration",
					"type": "uint256"
				}
			],
			"name": "Staked",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "Transfer",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "bucketId",
					"type": "uint256"
				}
			],
			"name": "Unlocked",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "Unpaused",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "bucketId",
					"type": "uint256"
				}
			],
			"name": "Unstaked",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "bucketId",
					"type": "uint256"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "recipient",
					"type": "address"
				}
			],
			"name": "Withdrawal",
			"type": "event"
		},
		{
			"inputs": [],
			"name": "MAX_DURATION",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "MIN_AMOUNT",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "ONE_DAY",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "UINT256_MAX",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "UNSTAKE_FREEZE_BLOCKS",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "approve",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				}
			],
			"name": "balanceOf",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "beneficiary",
			"outputs": [
				{
					"internalType": "address payable",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_bucketId",
					"type": "uint256"
				}
			],
			"name": "blocksToUnstake",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_bucketId",
					"type": "uint256"
				}
			],
			"name": "blocksToWithdraw",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_bucketId",
					"type": "uint256"
				}
			],
			"name": "bucketOf",
			"outputs": [
				{
					"components": [
						{
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						},
						{
							"internalType": "uint256",
							"name": "duration",
							"type": "uint256"
						},
						{
							"internalType": "uint256",
							"name": "unlockedAt",
							"type": "uint256"
						},
						{
							"internalType": "uint256",
							"name": "unstakedAt",
							"type": "uint256"
						},
						{
							"internalType": "address",
							"name": "delegate",
							"type": "address"
						}
					],
					"internalType": "struct Bucket",
					"name": "",
					"type": "tuple"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_bucketId",
					"type": "uint256"
				},
				{
					"internalType": "address",
					"name": "_delegate",
					"type": "address"
				}
			],
			"name": "changeDelegate",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256[]",
					"name": "_bucketIds",
					"type": "uint256[]"
				},
				{
					"internalType": "address",
					"name": "_delegate",
					"type": "address"
				}
			],
			"name": "changeDelegates",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_bucketId",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "_amount",
					"type": "uint256"
				}
			],
			"name": "donate",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_bucketId",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "_newDuration",
					"type": "uint256"
				}
			],
			"name": "expandBucket",
			"outputs": [],
			"stateMutability": "payable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "getApproved",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "operator",
					"type": "address"
				}
			],
			"name": "isApprovedForAll",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_bucketId",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "_duration",
					"type": "uint256"
				}
			],
			"name": "lock",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256[]",
					"name": "_bucketIds",
					"type": "uint256[]"
				},
				{
					"internalType": "uint256",
					"name": "_duration",
					"type": "uint256"
				}
			],
			"name": "lock",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256[]",
					"name": "bucketIds",
					"type": "uint256[]"
				},
				{
					"internalType": "uint256",
					"name": "_newDuration",
					"type": "uint256"
				}
			],
			"name": "merge",
			"outputs": [],
			"stateMutability": "payable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "name",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "owner",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "ownerOf",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "pause",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "paused",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "renounceOwnership",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "safeTransferFrom",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				},
				{
					"internalType": "bytes",
					"name": "data",
					"type": "bytes"
				}
			],
			"name": "safeTransferFrom",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "operator",
					"type": "address"
				},
				{
					"internalType": "bool",
					"name": "approved",
					"type": "bool"
				}
			],
			"name": "setApprovalForAll",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_amount",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "_duration",
					"type": "uint256"
				},
				{
					"internalType": "address",
					"name": "_delegate",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "_count",
					"type": "uint256"
				}
			],
			"name": "stake",
			"outputs": [
				{
					"internalType": "uint256[]",
					"name": "bucketIds_",
					"type": "uint256[]"
				}
			],
			"stateMutability": "payable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_duration",
					"type": "uint256"
				},
				{
					"internalType": "address",
					"name": "_delegate",
					"type": "address"
				}
			],
			"name": "stake",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "payable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_amount",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "_duration",
					"type": "uint256"
				},
				{
					"internalType": "address[]",
					"name": "_delegates",
					"type": "address[]"
				}
			],
			"name": "stake",
			"outputs": [
				{
					"internalType": "uint256[]",
					"name": "bucketIds_",
					"type": "uint256[]"
				}
			],
			"stateMutability": "payable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "bytes4",
					"name": "interfaceId",
					"type": "bytes4"
				}
			],
			"name": "supportsInterface",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "symbol",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "tokenURI",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "transferFrom",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "newOwner",
					"type": "address"
				}
			],
			"name": "transferOwnership",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256[]",
					"name": "_bucketIds",
					"type": "uint256[]"
				}
			],
			"name": "unlock",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_bucketId",
					"type": "uint256"
				}
			],
			"name": "unlock",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "unpause",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_bucketId",
					"type": "uint256"
				}
			],
			"name": "unstake",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256[]",
					"name": "_bucketIds",
					"type": "uint256[]"
				}
			],
			"name": "unstake",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_bucketId",
					"type": "uint256"
				},
				{
					"internalType": "address payable",
					"name": "_recipient",
					"type": "address"
				}
			],
			"name": "withdraw",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256[]",
					"name": "_bucketIds",
					"type": "uint256[]"
				},
				{
					"internalType": "address payable",
					"name": "_recipient",
					"type": "address"
				}
			],
			"name": "withdraw",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		}
	]`
)

func TestContractStakingV2(t *testing.T) {
	require := require.New(t)
	adminID := 0
	deployAddr := "io18vlvlj0v02yye70kpqtzhu4uek3qqz27zm7g42"
	testInitCands := []genesis.BootstrapCandidate{
		{
			OwnerAddress:      identityset.Address(0).String(),
			OperatorAddress:   identityset.Address(1).String(),
			RewardAddress:     identityset.Address(1).String(),
			Name:              "test0",
			SelfStakingTokens: selfStake.String(),
		},
		{
			OwnerAddress:      identityset.Address(22).String(),
			OperatorAddress:   identityset.Address(23).String(),
			RewardAddress:     identityset.Address(23).String(),
			Name:              "test1",
			SelfStakingTokens: selfStake.String(),
		},
		{
			OwnerAddress:      identityset.Address(24).String(),
			OperatorAddress:   identityset.Address(25).String(),
			RewardAddress:     identityset.Address(25).String(),
			Name:              "test2",
			SelfStakingTokens: selfStake.String(),
		},
	}
	testContractStaking := func(cfg config.Config) {
		ctx := context.Background()

		// Create a new blockchain
		svr, err := itx.NewServer(cfg)
		require.NoError(err)
		require.NoError(svr.Start(ctx))
		defer func() {
			require.NoError(svr.Stop(ctx))
			testutil.CleanupPath(cfg.Chain.StakingPatchDir)
			testutil.CleanupPath(cfg.Chain.StakingIndexDBPath)
			testutil.CleanupPath(cfg.Chain.TrieDBPatchFile)
			testutil.CleanupPath(cfg.Chain.TrieDBPath)
			testutil.CleanupPath(cfg.Chain.ChainDBPath)
			testutil.CleanupPath(cfg.Chain.IndexDBPath)
			testutil.CleanupPath(cfg.Chain.SGDIndexDBPath)
			testutil.CleanupPath(cfg.Chain.BloomfilterIndexDBPath)
			testutil.CleanupPath(cfg.Chain.CandidateIndexDBPath)
			testutil.CleanupPath(cfg.Chain.ContractStakingIndexDBPath)
			testutil.CleanupPath(cfg.Chain.ContractStakingV2IndexDBPath)
			testutil.CleanupPath(cfg.System.SystemLogDBPath)
			testutil.CleanupPath(cfg.Consensus.RollDPoS.ConsensusDBPath)
		}()

		chainID := cfg.Chain.ID
		bc := svr.ChainService(chainID).Blockchain()
		sf := svr.ChainService(chainID).StateFactory()
		ap := svr.ChainService(chainID).ActionPool()
		dao := svr.ChainService(chainID).BlockDAO()
		cs := svr.APIServer(chainID).CoreService()
		require.NotNil(bc)

		jumpBlocks(bc, int(cfg.Genesis.TsunamiBlockHeight), require)
		// deploy contract
		stakingContractABI := newStakingContractV2ABI()
		deployCode, err := stakingContractABI.deploy(big.NewInt(100), common.BytesToAddress(identityset.Address(1).Bytes()))
		param := callParam{
			contractAddr: deployAddr,
			bytecode:     hex.EncodeToString(deployCode),
			amount:       big.NewInt(0),
			gasLimit:     20000000,
			gasPrice:     big.NewInt(0).SetBytes(testutil.TestGasPrice.Bytes()),
			chainID:      uint64(chainID),
			sk:           identityset.PrivateKey(adminID),
		}
		contractAddress := deployContracts(bc, sf, dao, ap, &param, require)
		require.Equal(deployAddr, contractAddress)

		cand1Addr := identityset.Address(0)
		// cand1PriKey := identityset.PrivateKey(0)
		voter1Addr := identityset.Address(1)
		voter1PriKey := identityset.PrivateKey(1)
		// voter1Nonce := uint64(0)
		// voter2 := identityset.Address(2)
		// voter2Nonce := uint64(0)
		t.Run("stake", func(t *testing.T) {
			amount, duration := big.NewInt(100), big.NewInt(17280)
			bytecode, err := stakingContractABI.stake0(duration, common.BytesToAddress(cand1Addr.Bytes()))
			require.NoError(err)
			param := callParam{
				contractAddr: contractAddress,
				bytecode:     hex.EncodeToString(bytecode),
				amount:       amount,
				gasLimit:     20000000,
				gasPrice:     big.NewInt(0).SetBytes(testutil.TestGasPrice.Bytes()),
				chainID:      uint64(chainID),
				sk:           voter1PriKey,
			}
			receipts, _ := writeContract(bc, sf, dao, ap, []*callParam{&param}, require)
			require.Len(receipts, 1)
			require.Equal("", receipts[0].ExecutionRevertMsg())
			require.Equal(uint64(iotextypes.ReceiptStatus_Success), receipts[0].Status)

			methodName, err := proto.Marshal(&iotexapi.ReadStakingDataMethod{
				Method: iotexapi.ReadStakingDataMethod_COMPOSITE_BUCKETS_BY_VOTER,
			})
			require.NoError(err)
			arg, err := proto.Marshal(&iotexapi.ReadStakingDataRequest{
				Request: &iotexapi.ReadStakingDataRequest_BucketsByVoter{
					BucketsByVoter: &iotexapi.ReadStakingDataRequest_VoteBucketsByVoter{
						VoterAddress: voter1Addr.String(),
						Pagination: &iotexapi.PaginationParam{
							Offset: 0,
							Limit:  100000,
						},
					},
				},
			})
			require.NoError(err)
			resp, err := cs.ReadState("staking", "", methodName, [][]byte{arg})
			require.NoError(err)
			voteBucketList := &iotextypes.VoteBucketList{}
			require.NoError(proto.Unmarshal(resp.GetData(), voteBucketList))
			require.Len(voteBucketList.Buckets, 1)
		})
	}

	t.Run("contract staking v2", func(t *testing.T) {
		cfg := deepcopy.Copy(config.Default).(config.Config)
		// configure database file
		testTriePath, err := testutil.PathOfTempFile("trie")
		require.NoError(err)
		testDBPath, err := testutil.PathOfTempFile("db")
		require.NoError(err)
		testIndexPath, err := testutil.PathOfTempFile("index")
		require.NoError(err)
		testBloomfilterIndexPath, err := testutil.PathOfTempFile("bloomfilterindex")
		require.NoError(err)
		testCandidateIndexPath, err := testutil.PathOfTempFile("candidateindex")
		require.NoError(err)
		testContractStakeIndexPath, err := testutil.PathOfTempFile("contractindex")
		require.NoError(err)
		testContractStakeIndexV2Path, err := testutil.PathOfTempFile("contractindexv2")
		require.NoError(err)
		testSystemLogPath, err := testutil.PathOfTempFile("systemlog")
		require.NoError(err)
		testConsensusPath, err := testutil.PathOfTempFile("consensus")
		require.NoError(err)
		testSGDIndexPath, err := testutil.PathOfTempFile("sgdIndex")
		require.NoError(err)
		testStakingPath, err := testutil.PathOfTempFile("staking")
		require.NoError(err)
		testStakingPatchPath, err := testutil.PathOfTempFile("stakingPatch")
		require.NoError(err)
		testTriePatchPath, err := testutil.PathOfTempFile("triePatch")
		require.NoError(err)
		cfg.Chain.ChainDBPath = testDBPath
		cfg.Chain.TrieDBPath = testTriePath
		cfg.Chain.IndexDBPath = testIndexPath
		cfg.Chain.BloomfilterIndexDBPath = testBloomfilterIndexPath
		cfg.Chain.CandidateIndexDBPath = testCandidateIndexPath
		cfg.Chain.ContractStakingIndexDBPath = testContractStakeIndexPath
		cfg.Chain.ContractStakingV2IndexDBPath = testContractStakeIndexV2Path
		cfg.System.SystemLogDBPath = testSystemLogPath
		cfg.Consensus.RollDPoS.ConsensusDBPath = testConsensusPath
		cfg.Chain.SGDIndexDBPath = testSGDIndexPath
		cfg.Chain.StakingPatchDir = testStakingPatchPath
		cfg.Chain.StakingIndexDBPath = testStakingPath
		cfg.Chain.TrieDBPatchFile = testTriePatchPath
		// enable hardfork
		height := uint64(1)
		cfg.Genesis.PacificBlockHeight = height
		height++
		cfg.Genesis.AleutianBlockHeight = height
		height++
		cfg.Genesis.BeringBlockHeight = height
		height++
		cfg.Genesis.CookBlockHeight = height
		height++
		cfg.Genesis.DardanellesBlockHeight = height
		height++
		cfg.Genesis.DaytonaBlockHeight = height
		height++
		cfg.Genesis.EasterBlockHeight = height
		height++
		cfg.Genesis.FbkMigrationBlockHeight = height
		height++
		cfg.Genesis.FairbankBlockHeight = height
		height++
		cfg.Genesis.GreenlandBlockHeight = height
		height++
		cfg.Genesis.HawaiiBlockHeight = height
		height++
		cfg.Genesis.IcelandBlockHeight = height
		height++
		cfg.Genesis.JutlandBlockHeight = height
		height++
		cfg.Genesis.KamchatkaBlockHeight = height
		height++
		cfg.Genesis.LordHoweBlockHeight = height
		height++
		cfg.Genesis.MidwayBlockHeight = height
		height++
		cfg.Genesis.NewfoundlandBlockHeight = height
		height++
		cfg.Genesis.OkhotskBlockHeight = height
		height++
		cfg.Genesis.PalauBlockHeight = height
		height++
		cfg.Genesis.QuebecBlockHeight = height
		height++
		cfg.Genesis.RedseaBlockHeight = height
		height++
		cfg.Genesis.SumatraBlockHeight = height
		height++
		cfg.Genesis.TsunamiBlockHeight = height
		height++
		// init account balance
		cfg.Genesis.InitBalanceMap[identityset.Address(0).String()] = "1000000000000000000000000000"
		cfg.Genesis.InitBalanceMap[identityset.Address(1).String()] = "1000000000000000000000000000"
		cfg.Genesis.InitBalanceMap[identityset.Address(2).String()] = "1000000000000000000000000000"
		cfg.ActPool.MinGasPriceStr = "0"
		// cfg.Genesis.BlockInterval = 1000 * time.Hour
		// cfg.Consensus.RollDPoS.FSM.AcceptBlockTTL = cfg.Genesis.BlockInterval / 5 * 2
		// cfg.Consensus.RollDPoS.FSM.AcceptProposalEndorsementTTL = cfg.Genesis.BlockInterval / 5
		// cfg.Consensus.RollDPoS.FSM.AcceptLockEndorsementTTL = cfg.Genesis.BlockInterval / 5
		// cfg.Consensus.RollDPoS.FSM.CommitTTL = cfg.Genesis.BlockInterval / 5
		// cfg.DardanellesUpgrade.BlockInterval = 1000 * time.Hour
		// cfg.DardanellesUpgrade.AcceptBlockTTL = cfg.DardanellesUpgrade.BlockInterval / 5 * 2
		// cfg.DardanellesUpgrade.AcceptProposalEndorsementTTL = cfg.DardanellesUpgrade.BlockInterval / 5
		// cfg.DardanellesUpgrade.AcceptLockEndorsementTTL = cfg.DardanellesUpgrade.BlockInterval / 5
		// cfg.DardanellesUpgrade.CommitTTL = cfg.DardanellesUpgrade.BlockInterval / 5

		cfg.Consensus.Scheme = config.NOOPScheme
		// cfg.Genesis.NumDelegates = 1
		// cfg.Genesis.NumSubEpochs = 10
		// cfg.Genesis.Delegates = []genesis.Delegate{
		// 	{
		// 		OperatorAddrStr: identityset.Address(0).String(),
		// 		RewardAddrStr:   identityset.Address(0).String(),
		// 		VotesStr:        "10",
		// 	},
		// }
		// cfg.Genesis.PollMode = "lifeLong"
		// cfg.Chain.ProducerPrivKey = identityset.PrivateKey(0).HexString()
		// cfg.Genesis.EnableGravityChainVoting = false
		cfg.Plugins[config.GatewayPlugin] = true
		cfg.Chain.EnableAsyncIndexWrite = false
		// signedxxx function does not chainID yet
		cfg.Chain.ID = 0
		cfg.Genesis.BootstrapCandidates = testInitCands
		// contract indexer
		cfg.Genesis.Poll.SystemStakingContractV2Address = deployAddr
		cfg.Genesis.Poll.SystemStakingContractV2Height = 4
		testContractStaking(cfg)
	})
}

type stakingContractV2ABI struct {
	abi      *abi.ABI
	bytecode string
}

func newStakingContractV2ABI() *stakingContractV2ABI {
	abi, err := abi.JSON(strings.NewReader(stakingContractV2ABIJSON))
	if err != nil {
		panic(err)
	}
	return &stakingContractV2ABI{
		abi:      &abi,
		bytecode: stakingContractV2ByteCode,
	}
}

func (sc *stakingContractV2ABI) deploy(minAmount *big.Int, beneficiary common.Address) ([]byte, error) {
	data, err := sc.abi.Pack("", minAmount, beneficiary)
	if err != nil {
		return nil, err
	}
	deployCode := append(common.FromHex(sc.bytecode), data...)
	return deployCode, nil

}

func (sc *stakingContractV2ABI) stake0(duration *big.Int, candidate common.Address) ([]byte, error) {
	data, err := sc.abi.Pack("stake0", duration, candidate)
	if err != nil {
		return nil, err
	}
	return data, nil
}

func deployContractsAsync(
	ap actpool.ActPool,
	cs api.CoreService,
	param *callParam,
	r *require.Assertions,
) (contractAddresses string) {
	sk := param.sk
	bytecode, err := hex.DecodeString(param.bytecode)
	r.NoError(err)
	nonce, err := ap.GetPendingNonce(sk.PublicKey().Address().String())
	r.NoError(err)
	amount := param.amount
	gasLimit := param.gasLimit
	gasPrice := param.gasPrice
	exec, err := action.NewExecutionWithAccessList(action.EmptyAddress, nonce, amount, gasLimit, gasPrice, bytecode, nil)
	r.NoError(err)
	builder := &action.EnvelopeBuilder{}
	elp := builder.SetAction(exec).
		SetNonce(exec.Nonce()).
		SetGasLimit(gasLimit).
		SetGasPrice(gasPrice).
		SetChainID(uint32(param.chainID)).
		Build()
	selp, err := action.Sign(elp, sk)
	r.NoError(err)
	err = ap.Add(context.Background(), selp)
	r.NoError(err)
	selpHash, err := selp.Hash()
	r.NoError(err)

	// wait for the receipt
	err = testutil.WaitUntil(100*time.Millisecond, 10*time.Second, func() (bool, error) {
		receipt, err := cs.ReceiptByActionHash(selpHash)
		if err != nil || receipt == nil {
			return false, err
		}
		return true, nil
	})
	r.NoError(err)
	receipt, err := cs.ReceiptByActionHash(selpHash)
	r.Equal(selpHash, receipt.ActionHash)
	r.NoError(err)
	r.NotNil(receipt)
	r.Equal("", receipt.ExecutionRevertMsg())
	r.Equal(uint64(iotextypes.ReceiptStatus_Success), receipt.Status)

	return receipt.ContractAddress
}

func writeContractAsync(
	ap actpool.ActPool,
	cs api.CoreService,
	params []*callParam,
	r *require.Assertions,
) []*action.Receipt {
	nonces := map[string]uint64{}
	hashes := []hash.Hash256{}
	for _, param := range params {
		nonce := uint64(1)
		// var ok bool
		sk := param.sk
		executor := sk.PublicKey().Address()
		nonce, err := ap.GetPendingNonce(executor.String())
		r.NoError(err)
		// if nonce, ok = nonces[executor.String()]; !ok {
		// 	state, err := accountutil.AccountState(genesis.WithGenesisContext(context.Background(), bc.Genesis()), sf, executor)
		// 	r.NoError(err)
		// 	nonce = state.PendingNonce()
		// } else {
		// 	nonce++
		// }
		nonces[executor.String()] = nonce

		amount := param.amount
		gasLimit := param.gasLimit
		gasPrice := param.gasPrice
		bytecode, err := hex.DecodeString(param.bytecode)
		r.NoError(err)
		exec, err := action.NewExecutionWithAccessList(param.contractAddr, nonce, amount, gasLimit, gasPrice, bytecode, nil)
		r.NoError(err)
		builder := &action.EnvelopeBuilder{}
		elp := builder.SetAction(exec).
			SetNonce(exec.Nonce()).
			SetGasLimit(gasLimit).
			SetGasPrice(gasPrice).
			Build()
		selp, err := action.Sign(elp, sk)
		r.NoError(err)
		err = ap.Add(context.Background(), selp)
		r.NoError(err)
		selpHash, err := selp.Hash()
		hashes = append(hashes, selpHash)
	}

	receipts := []*action.Receipt{}
	for _, hash := range hashes {
		// wait for the receipt
		var (
			receipt *action.Receipt
			err     error
		)
		err = testutil.WaitUntil(100*time.Millisecond, 10*time.Second, func() (bool, error) {
			receipt, err = cs.ReceiptByActionHash(hash)
			if err != nil || receipt == nil {
				return false, err
			}
			return true, nil
		})
		r.NoError(err)
		receipts = append(receipts, receipt)
	}
	return receipts
}

func jumpBlocksAsync(bc blockchain.Blockchain, count int, r *require.Assertions) {
	org := bc.TipHeight()
	testutil.WaitUntil(100*time.Millisecond, 10*time.Second, func() (bool, error) {
		return bc.TipHeight() >= org+uint64(count), nil
	})
}
