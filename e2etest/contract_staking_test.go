package e2etest

import (
	"context"
	"encoding/hex"
	"math"
	"math/big"
	"strings"
	"testing"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common"
	"github.com/iotexproject/go-pkgs/crypto"
	"github.com/iotexproject/go-pkgs/hash"
	"github.com/iotexproject/iotex-proto/golang/iotextypes"
	"github.com/stretchr/testify/require"
	"golang.org/x/exp/slices"

	"github.com/iotexproject/iotex-core/action"
	"github.com/iotexproject/iotex-core/action/protocol"
	"github.com/iotexproject/iotex-core/action/protocol/account"
	accountutil "github.com/iotexproject/iotex-core/action/protocol/account/util"
	"github.com/iotexproject/iotex-core/action/protocol/execution"
	"github.com/iotexproject/iotex-core/action/protocol/rewarding"
	"github.com/iotexproject/iotex-core/action/protocol/rolldpos"
	"github.com/iotexproject/iotex-core/actpool"
	"github.com/iotexproject/iotex-core/blockchain"
	"github.com/iotexproject/iotex-core/blockchain/block"
	"github.com/iotexproject/iotex-core/blockchain/blockdao"
	"github.com/iotexproject/iotex-core/blockchain/genesis"
	"github.com/iotexproject/iotex-core/blockindex"
	"github.com/iotexproject/iotex-core/blockindex/contractstaking"
	"github.com/iotexproject/iotex-core/config"
	"github.com/iotexproject/iotex-core/db"
	"github.com/iotexproject/iotex-core/state/factory"
	"github.com/iotexproject/iotex-core/test/identityset"
	"github.com/iotexproject/iotex-core/testutil"
)

const (
	// _stakingContractByteCode is the byte code of the contract staking contract for testing, which changes the freeze blocks to 10
	_stakingContractByteCode = `60806040523480156200001157600080fd5b5060405180604001604052806009815260200168109d58dad95d13919560ba1b815250604051806040016040528060038152602001621092d560ea1b81525081600090816200006191906200019b565b5060016200007082826200019b565b5050506200008d62000087620000a060201b60201c565b620000a4565b6006805460ff60a01b1916905562000267565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200012157607f821691505b6020821081036200014257634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200019657600081815260208120601f850160051c81016020861015620001715750805b601f850160051c820191505b8181101562000192578281556001016200017d565b5050505b505050565b81516001600160401b03811115620001b757620001b7620000f6565b620001cf81620001c884546200010c565b8462000148565b602080601f831160018114620002075760008415620001ee5750858301515b600019600386901b1c1916600185901b17855562000192565b600085815260208120601f198616915b82811015620002385788860151825594840194600190910190840162000217565b5085821015620002575787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b613f4980620002776000396000f3fe6080604052600436106102ad5760003560e01c806378bfca1011610175578063b8f4bd7b116100dc578063e0028ecf11610095578063eb0ffb2e1161006f578063eb0ffb2e14610880578063eec7ee73146108a0578063f0b56b5d146108b3578063f2fde38b146108c857600080fd5b8063e0028ecf146107f7578063e449f34114610817578063e985e9c51461083757600080fd5b8063b8f4bd7b1461074e578063bbe33ea51461076e578063c87b56dd14610781578063c8e77923146107a1578063d0949f99146107c1578063d6605fd8146107d757600080fd5b8063960014bd1161012e578063960014bd146106a657806398ca3b76146106c65780639f7d5b00146106e6578063a22cb465146106fb578063b2383e551461071b578063b88d4fde1461072e57600080fd5b806378bfca10146105fe5780637acb77571461062b5780638456cb591461063e5780638da5cb5b1461065357806393b6ef591461067157806395d89b411461069157600080fd5b80633fd140df116102195780635d36598f116101d25780635d36598f146105565780636198e339146105765780636352211e1461059657806370a08231146105b6578063711563d4146105d6578063715018a6146105e957600080fd5b80633fd140df1461045957806342842e0e14610486578063431cd92a146104a657806343e06c59146104f75780635c975abb146105175780635ceb8b5b1461053657600080fd5b8063095ea7b31161026b578063095ea7b3146103a45780630f5b2ca5146103c45780631338736f146103e457806323b872dd146104045780632e17de78146104245780633f4ba83a1461044457600080fd5b8062f714ce146102b257806301ffc9a7146102d4578063025008ed1461030957806303459b161461031c57806306fdde031461034a578063081812fc1461036c575b600080fd5b3480156102be57600080fd5b506102d26102cd366004613606565b6108e8565b005b3480156102e057600080fd5b506102f46102ef36600461364c565b6109af565b60405190151581526020015b60405180910390f35b6102d2610317366004613669565b610a01565b34801561032857600080fd5b5061033c610337366004613695565b610b4d565b604051908152602001610300565b34801561035657600080fd5b5061035f610b73565b60405161030091906136fe565b34801561037857600080fd5b5061038c610387366004613695565b610c05565b6040516001600160a01b039091168152602001610300565b3480156103b057600080fd5b506102d26103bf366004613711565b610c2c565b3480156103d057600080fd5b506102d26103df366004613606565b610d41565b3480156103f057600080fd5b506102d26103ff36600461373d565b610dae565b34801561041057600080fd5b506102d261041f36600461375f565b610e21565b34801561043057600080fd5b506102d261043f366004613695565b610e52565b34801561045057600080fd5b506102d2610f01565b34801561046557600080fd5b506104796104743660046137eb565b610f13565b604051610300919061382c565b34801561049257600080fd5b506102d26104a136600461375f565b611095565b3480156104b257600080fd5b506104c66104c1366004613695565b6110b0565b6040805195865260208601949094529284019190915260608301526001600160a01b0316608082015260a001610300565b34801561050357600080fd5b506102f461051236600461373d565b61112c565b34801561052357600080fd5b50600654600160a01b900460ff166102f4565b34801561054257600080fd5b506102d26105513660046138b6565b611147565b34801561056257600080fd5b506102d26105713660046137eb565b6111ee565b34801561058257600080fd5b506102d2610591366004613695565b611284565b3480156105a257600080fd5b5061038c6105b1366004613695565b6112e6565b3480156105c257600080fd5b5061033c6105d1366004613901565b611346565b61033c6105e436600461391e565b6113cc565b3480156105f557600080fd5b506102d26114a5565b34801561060a57600080fd5b5061061e61061936600461373d565b6114b7565b604051610300919061395d565b61033c610639366004613606565b6115ec565b34801561064a57600080fd5b506102d2611670565b34801561065f57600080fd5b506006546001600160a01b031661038c565b34801561067d57600080fd5b5061033c61068c366004613695565b611680565b34801561069d57600080fd5b5061035f6116ab565b3480156106b257600080fd5b506104796106c13660046137eb565b6116ba565b3480156106d257600080fd5b506102d26106e13660046139b6565b611834565b3480156106f257600080fd5b50600b5461033c565b34801561070757600080fd5b506102d2610716366004613a0c565b6118ca565b6102d261072936600461373d565b6118d9565b34801561073a57600080fd5b506102d2610749366004613a85565b6119dd565b34801561075a57600080fd5b506102d26107693660046139b6565b611a15565b6102d261077c3660046138b6565b611b04565b34801561078d57600080fd5b5061035f61079c366004613695565b611ceb565b3480156107ad57600080fd5b506102d26107bc36600461373d565b611d5e565b3480156107cd57600080fd5b5061033c60001981565b3480156107e357600080fd5b506102d26107f236600461373d565b611f03565b34801561080357600080fd5b506102d261081236600461373d565b611fe8565b34801561082357600080fd5b506102d26108323660046137eb565b61205c565b34801561084357600080fd5b506102f4610852366004613b48565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561088c57600080fd5b506102d261089b36600461373d565b612138565b61033c6108ae366004613b76565b6121ae565b3480156108bf57600080fd5b5061033c600a81565b3480156108d457600080fd5b506102d26108e3366004613901565b6122b3565b6108f061232c565b816108fa81612379565b60008381526008602052604090206002810154610916906123ce565b156109605760405162461bcd60e51b81526020600482015260156024820152746e6f7420726561647920746f20776974686472617760581b60448201526064015b60405180910390fd5b61096984612442565b61097381846124e5565b6040516001600160a01b0384169085907fd964a27d45f595739c13d8b1160b57491050cacf3a2e5602207277d6228f64ee90600090a350505050565b60006001600160e01b031982166380ac58cd60e01b14806109e057506001600160e01b03198216635b5e139f60e01b145b806109fb57506301ffc9a760e01b6001600160e01b03198316145b92915050565b610a0961232c565b82610a1381612379565b6000848152600860205260409020610a2a816125a4565b8054600b80546000919083908110610a4457610a44613c3c565b9060005260206000209060030201905080600101548511610a775760405162461bcd60e51b815260040161095790613c52565b600034118015610a92575080548690610a909034613c92565b145b610acf5760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b6044820152606401610957565b60038301546001600160a01b03166000908152600a6020908152604080832085845290915290208054600019019055610b098387876125ee565b604080518781526020810187905288917fd29e04160a74f0dbab5e7b82ef0392d86d11ac2939e5883eb3353be4cfedb83e910160405180910390a250505050505050565b6000610b588261263a565b6000828152600860205260409020600201546109fb906123ce565b606060008054610b8290613ca5565b80601f0160208091040260200160405190810160405280929190818152602001828054610bae90613ca5565b8015610bfb5780601f10610bd057610100808354040283529160200191610bfb565b820191906000526020600020905b815481529060010190602001808311610bde57829003601f168201915b5050505050905090565b6000610c108261263a565b506000908152600460205260409020546001600160a01b031690565b6000610c37826112e6565b9050806001600160a01b0316836001600160a01b031603610ca45760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610957565b336001600160a01b0382161480610cc05750610cc08133610852565b610d325760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610957565b610d3c8383612699565b505050565b610d4961232c565b81610d5381612379565b6000838152600860205260409020610d6b9083612707565b6040516001600160a01b038316815283907f6f08c7e76d830d5f3d0a18fd27f4d8c0049b24a8689ddb39625e0864d894a9c19060200160405180910390a2505050565b610db661232c565b81610dc081612379565b6000838152600860205260409020610dd781612805565b610de1818461284f565b837f907fece23ce39fbcbceb71e515043fe29408353fbb393b25b35eb8a70a4bad0b84604051610e1391815260200190565b60405180910390a250505050565b610e2b3382612919565b610e475760405162461bcd60e51b815260040161095790613cdf565b610d3c838383612997565b610e5a61232c565b80610e6481612379565b6000828152600860205260409020610e7b81612805565b610e8481612b08565b15610ec85760405162461bcd60e51b81526020600482015260146024820152736e6f7420726561647920746f20756e7374616b6560601b6044820152606401610957565b610ed181612bad565b60405183907f11725367022c3ff288940f4b5473aa61c2da6a24af7363a1128ee2401e8983b290600090a2505050565b610f09612be4565b610f11612c3e565b565b6060816001600160401b03811115610f2d57610f2d613a3f565b604051908082528060200260200182016040528015610f6057816020015b6060815260200190600190039081610f4b5790505b5090506000610f6e600b5490565b905060005b8381101561108d57816001600160401b03811115610f9357610f93613a3f565b604051908082528060200260200182016040528015610fbc578160200160208202803683370190505b50838281518110610fcf57610fcf613c3c565b60200260200101819052506000600a6000878785818110610ff257610ff2613c3c565b90506020020160208101906110079190613901565b6001600160a01b03166001600160a01b03168152602001908152602001600020905060005b8381101561108357600081815260208390526040902054855186908590811061105757611057613c3c565b6020026020010151828151811061107057611070613c3c565b602090810291909101015260010161102c565b5050600101610f73565b505092915050565b610d3c838383604051806020016040528060008152506119dd565b60008060008060006110c18661263a565b60008681526008602052604081208054600b805492939290919081106110e9576110e9613c3c565b6000918252602090912060039182020180546001918201549185015460028601549590930154909b919a509198509296506001600160a01b031694509092505050565b600061114061113b8484612c93565b612cfa565b9392505050565b61114f61232c565b60008060005b848110156111e65785858281811061116f5761116f613c3c565b90506020020135925061118183612379565b6000838152600860205260409020915061119a82612805565b6111a4828561284f565b827f907fece23ce39fbcbceb71e515043fe29408353fbb393b25b35eb8a70a4bad0b856040516111d691815260200190565b60405180910390a2600101611155565b505050505050565b6111f661232c565b60008060005b8381101561127d5784848281811061121657611216613c3c565b90506020020135925061122883612379565b60008381526008602052604090209150611241826125a4565b61124a82612d2b565b60405183907ff27b6ce5b2f5e68ddb2fd95a8a909d4ecf1daaac270935fff052feacb24f184290600090a26001016111fc565b5050505050565b61128c61232c565b8061129681612379565b60008281526008602052604090206112ad816125a4565b6112b681612d2b565b60405183907ff27b6ce5b2f5e68ddb2fd95a8a909d4ecf1daaac270935fff052feacb24f184290600090a2505050565b6000818152600260205260408120546001600160a01b0316806109fb5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610957565b60006001600160a01b0382166113b05760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610957565b506001600160a01b031660009081526003602052604090205490565b60006113d661232c565b6000821180156113ee5750346113ec8387613d2c565b145b61140a5760405162461bcd60e51b815260040161095790613d43565b60006114168686612c93565b905061142181612d7f565b600754600101915060005b8381101561149a5761143e8286612dcb565b6114488184613c92565b604080516001600160a01b0388168152602081018a90529081018890527f17700ceb1658b18206f427c1578048e87504106b14ec69e9b4586d9a95174a329060600160405180910390a260010161142c565b50505b949350505050565b6114ad612be4565b610f116000612e65565b60606000821180156114d45750600b546114d18385613c92565b11155b6114f05760405162461bcd60e51b815260040161095790613d43565b816001600160401b0381111561150857611508613a3f565b60405190808252806020026020018201604052801561155d57816020015b61154a60405180606001604052806000815260200160008152602001600081525090565b8152602001906001900390816115265790505b50905060005b828110156115e557600b8185018154811061158057611580613c3c565b906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250508282815181106115c9576115c9613c3c565b60200260200101819052506115de8160010190565b9050611563565b5092915050565b60006115f661232c565b3460006116038286612c93565b905061160e81612d7f565b6116188185612dcb565b600754604080516001600160a01b03871681526020810185905290810187905281907f17700ceb1658b18206f427c1578048e87504106b14ec69e9b4586d9a95174a329060600160405180910390a295945050505050565b611678612be4565b610f11612eb7565b600061168b8261263a565b60008281526008602052604090206116a281612805565b61114081612b08565b606060018054610b8290613ca5565b6060816001600160401b038111156116d4576116d4613a3f565b60405190808252806020026020018201604052801561170757816020015b60608152602001906001900390816116f25790505b5090506000611715600b5490565b905060005b8381101561108d57816001600160401b0381111561173a5761173a613a3f565b604051908082528060200260200182016040528015611763578160200160208202803683370190505b5083828151811061177657611776613c3c565b602002602001018190525060006009600087878581811061179957611799613c3c565b90506020020160208101906117ae9190613901565b6001600160a01b03166001600160a01b03168152602001908152602001600020905060005b8381101561182a5760008181526020839052604090205485518690859081106117fe576117fe613c3c565b6020026020010151828151811061181757611817613c3c565b60209081029190910101526001016117d3565b505060010161171a565b61183c61232c565b6000805b8381101561127d5784848281811061185a5761185a613c3c565b90506020020135915061186c82612379565b60008281526008602052604090206118849084612707565b6040516001600160a01b038416815282907f6f08c7e76d830d5f3d0a18fd27f4d8c0049b24a8689ddb39625e0864d894a9c19060200160405180910390a2600101611840565b6118d5338383612efa565b5050565b6118e161232c565b816118eb81612379565b6000838152600860205260409020611902816125a4565b8054600b8054600091908390811061191c5761191c613c3c565b906000526020600020906003020190508481600001543461193d9190613c92565b1461195a5760405162461bcd60e51b815260040161095790613d6f565b60038301546001600160a01b03166000908152600a6020908152604080832085845290915290208054600019019055600181015461199b90849087906125ee565b857f1d9c4d2b3e13eb9ac08a42625750ac17ec6ca94b4755c49285e9467b4e48c89d866040516119cd91815260200190565b60405180910390a2505050505050565b6119e73383612919565b611a035760405162461bcd60e51b815260040161095790613cdf565b611a0f84848484612fc8565b50505050565b611a1d61232c565b60008060005b848110156111e657858582818110611a3d57611a3d613c3c565b905060200201359250611a4f83612379565b60008381526008602052604090206002810154909250611a6e906123ce565b15611ab35760405162461bcd60e51b81526020600482015260156024820152746e6f7420726561647920746f20776974686472617760581b6044820152606401610957565b611abc83612442565b611ac682856124e5565b6040516001600160a01b0385169084907fd964a27d45f595739c13d8b1160b57491050cacf3a2e5602207277d6228f64ee90600090a3600101611a23565b611b0c61232c565b60018211611b4d5760405162461bcd60e51b815260206004820152600e60248201526d0d2dcecc2d8d2c840d8cadccee8d60931b6044820152606401610957565b3460008080855b8015611ce15760001901878782818110611b7057611b70613c3c565b905060200201359350611b8284612379565b60008481526008602052604090209250611b9b83612805565b82546003840154600b80546001600160a01b039092169183908110611bc257611bc2613c3c565b906000526020600020906003020193508360010154881015611bf65760405162461bcd60e51b815260040161095790613c52565b8354611c029088613c92565b9650611c148560010154600019141590565b15611c49576001600160a01b038116600090815260096020908152604080832085845290915290208054600019019055611c75565b6001600160a01b0381166000908152600a60209081526040808320858452909152902080546000190190555b8215611c8957611c8486612442565b611cda565b6000196001860155611c9c85888a6125ee565b7fb3f4c8ca702dbbd32d9a25ce17b1942a5060284d9d69fc4fcac8fb0397891b128a8a898b604051611cd19493929190613d9a565b60405180910390a15b5050611b54565b5050505050505050565b6060611cf68261263a565b6000611d0d60408051602081019091526000815290565b90506000815111611d2d5760405180602001604052806000815250611140565b80611d3784612ffb565b604051602001611d48929190613de0565b6040516020818303038152906040529392505050565b611d66612be4565b81600003611daa5760405162461bcd60e51b8152602060048201526011602482015270185b5bdd5b9d081a5cc81a5b9d985b1a59607a1b6044820152606401610957565b6000828152600c6020908152604080832084845290915290205415611e095760405162461bcd60e51b81526020600482015260156024820152746475706c6963617465206275636b6574207479706560581b6044820152606401610957565b60408051606081018252838152602080820184815243838501908152600b8054600181018255600082815295517f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db960039092029182015592517f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dba84015590517f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dbb9092019190915554858352600c82528383208584528252918390209190915581518481529081018390527f6b39e3267efcd6611c8d7d2534c4715dcb4824322b90d85540a3a82967b6e7b791015b60405180910390a15050565b611f0b61232c565b81611f1581612379565b6000838152600860205260409020611f2c816125a4565b8054600b80546000919083908110611f4657611f46613c3c565b9060005260206000209060030201905080600101548511611f795760405162461bcd60e51b815260040161095790613d6f565b60038301546001600160a01b03166000908152600a60209081526040808320858452909152902080546000190190558054611fb6908490876125ee565b857fc599168ac63ff28ec278088a2c424383a36ca26c931eb41af05e014f19252ea4866040516119cd91815260200190565b611ff0612be4565b43600b611ffd8484612c93565b8154811061200d5761200d613c3c565b9060005260206000209060030201600201819055507f6b39e3267efcd6611c8d7d2534c4715dcb4824322b90d85540a3a82967b6e7b78282604051611ef7929190918252602082015260400190565b61206461232c565b60008060005b8381101561127d5784848281811061208457612084613c3c565b90506020020135925061209683612379565b600083815260086020526040902091506120af82612805565b6120b882612b08565b156120fc5760405162461bcd60e51b81526020600482015260146024820152736e6f7420726561647920746f20756e7374616b6560601b6044820152606401610957565b61210582612bad565b60405183907f11725367022c3ff288940f4b5473aa61c2da6a24af7363a1128ee2401e8983b290600090a260010161206a565b612140612be4565b600019600b61214f8484612c93565b8154811061215f5761215f613c3c565b9060005260206000209060030201600201819055507f099df2bf9247b43481cf1b791a4dd5fa1220c40c62940da539082fbcb30241d68282604051611ef7929190918252602082015260400190565b60006121b861232c565b348251856121c69190613d2c565b146121e35760405162461bcd60e51b815260040161095790613d43565b60006121ef8585612c93565b90506121fa81612d7f565b600754600101915060005b83518110156122aa576122318285838151811061222457612224613c3c565b6020026020010151612dcb565b61223b8184613c92565b7f17700ceb1658b18206f427c1578048e87504106b14ec69e9b4586d9a95174a3285838151811061226e5761226e613c3c565b602090810291909101810151604080516001600160a01b0390921682529181018a905290810188905260600160405180910390a2600101612205565b50509392505050565b6122bb612be4565b6001600160a01b0381166123205760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610957565b61232981612e65565b50565b600654600160a01b900460ff1615610f115760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610957565b612382816112e6565b6001600160a01b0316336001600160a01b0316146123295760405162461bcd60e51b81526020600482015260096024820152683737ba1037bbb732b960b91b6044820152606401610957565b6000600019820361241a5760405162461bcd60e51b81526020600482015260166024820152751b9bdd08185b881d5b9cdd185ad95908189d58dad95d60521b6044820152606401610957565b6000612427600a84613c92565b90504381116124395750600092915050565b43900392915050565b600061244d826112e6565b905061245d81600084600161308d565b612466826112e6565b600083815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0385168085526003845282852080546000190190558785526002909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6000600b8360000154815481106124fe576124fe613c3c565b600091825260208220600390910201546040519092506001600160a01b0384169083908381818185875af1925050503d8060008114612559576040519150601f19603f3d011682016040523d82523d6000602084013e61255e565b606091505b5050905080611a0f5760405162461bcd60e51b81526020600482015260126024820152713330b4b632b2103a37903a3930b739b332b960711b6044820152606401610957565b6001810154600019146123295760405162461bcd60e51b81526020600482015260126024820152713737ba1030903637b1b5b2b2103a37b5b2b760711b6044820152606401610957565b60006125fa8383612c93565b905061260581612d7f565b60038401546001600160a01b03166000908152600a602090815260408083208484529091529020805460010190559092555050565b6000818152600260205260409020546001600160a01b03166123295760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610957565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906126ce826112e6565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61271082612805565b815460038301546001600160a01b0390811690831681036127435760405162461bcd60e51b815260040161095790613d6f565b600184015460001914612799576001600160a01b038181166000908152600960208181526040808420878552825280842080546000190190559387168352908152828220858352905220805460010190556127de565b6001600160a01b038181166000908152600a60208181526040808420878552825280842080546000190190559387168352908152828220858352905220805460010190555b505060039190910180546001600160a01b0319166001600160a01b03909216919091179055565b6002810154600019146123295760405162461bcd60e51b81526020600482015260126024820152713737ba10309039ba30b5b2b2103a37b5b2b760711b6044820152606401610957565b815460038301546001600160a01b031661286884612b08565b8310156128875760405162461bcd60e51b815260040161095790613c52565b60006128b7600b848154811061289f5761289f613c3c565b90600052602060002090600302016000015485612c93565b90506128c281612d7f565b60001960018681018290556001600160a01b039390931660008181526009602090815260408083209783529681528682208054909401909355968390558652600a8152838620918652529220805490920190915550565b600080612925836112e6565b9050806001600160a01b0316846001600160a01b0316148061296c57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b8061149d5750836001600160a01b031661298584610c05565b6001600160a01b031614949350505050565b826001600160a01b03166129aa826112e6565b6001600160a01b0316146129d05760405162461bcd60e51b815260040161095790613e0f565b6001600160a01b038216612a325760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610957565b612a3f838383600161308d565b826001600160a01b0316612a52826112e6565b6001600160a01b031614612a785760405162461bcd60e51b815260040161095790613e0f565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60018101546000906000198103612b5a5760405162461bcd60e51b81526020600482015260166024820152751b9bdd08185b881d5b9b1bd8dad95908189d58dad95d60521b6044820152606401610957565b6000600b846000015481548110612b7357612b73613c3c565b90600052602060002090600302016001015482612b909190613c92565b9050438111612ba3575060009392505050565b4390039392505050565b43600282015560038101546001600160a01b0316600090815260096020908152604080832093548352929052208054600019019055565b6006546001600160a01b03163314610f115760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610957565b612c4661315d565b6006805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000828152600c6020908152604080832084845290915281205480612cf05760405162461bcd60e51b8152602060048201526013602482015272696e76616c6964206275636b6574207479706560681b6044820152606401610957565b600019810161149d565b600043600b8381548110612d1057612d10613c3c565b90600052602060002090600302016002015411159050919050565b80546003820154436001938401556001600160a01b03166000818152600a60209081526040808320858452825280832080546000190190559282526009815282822093825292909252902080549091019055565b612d8881612cfa565b6123295760405162461bcd60e51b8152602060048201526014602482015273696e616374697665206275636b6574207479706560601b6044820152606401610957565b6007805460019081018083556040805160808101825286815260001960208083018281528385019283526001600160a01b0389811660608601818152600098895260088552878920965187559251868a0155935160028601559051600390940180546001600160a01b03191694909116939093179092558352600a81528183208784529052902080549091019055546118d59033906131ad565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b612ebf61232c565b6006805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612c763390565b816001600160a01b0316836001600160a01b031603612f5b5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610957565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612fd3848484612997565b612fdf848484846131c7565b611a0f5760405162461bcd60e51b815260040161095790613e54565b60606000613008836132c5565b60010190506000816001600160401b0381111561302757613027613a3f565b6040519080825280601f01601f191660200182016040528015613051576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461305b57509392505050565b806001146130dd5760405162461bcd60e51b815260206004820152601f60248201527f6261746368207472616e73666572206973206e6f7420737570706f72746564006044820152606401610957565b6001600160a01b03831615806131055750600082815260086020526040902060020154600019145b6131515760405162461bcd60e51b815260206004820152601e60248201527f63616e6e6f74207472616e7366657220756e7374616b656420746f6b656e00006044820152606401610957565b611a0f8484848461339d565b600654600160a01b900460ff16610f115760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610957565b6118d5828260405180602001604052806000815250613425565b60006001600160a01b0384163b156132bd57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061320b903390899088908890600401613ea6565b6020604051808303816000875af1925050508015613246575060408051601f3d908101601f1916820190925261324391810190613ee3565b60015b6132a3573d808015613274576040519150601f19603f3d011682016040523d82523d6000602084013e613279565b606091505b50805160000361329b5760405162461bcd60e51b815260040161095790613e54565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061149d565b50600161149d565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106133045772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310613330576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061334e57662386f26fc10000830492506010015b6305f5e1008310613366576305f5e100830492506008015b612710831061337a57612710830492506004015b6064831061338c576064830492506002015b600a83106109fb5760010192915050565b6001811115611a0f576001600160a01b038416156133e3576001600160a01b038416600090815260036020526040812080548392906133dd908490613f00565b90915550505b6001600160a01b03831615611a0f576001600160a01b0383166000908152600360205260408120805483929061341a908490613c92565b909155505050505050565b61342f8383613458565b61343c60008484846131c7565b610d3c5760405162461bcd60e51b815260040161095790613e54565b6001600160a01b0382166134ae5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610957565b6000818152600260205260409020546001600160a01b0316156135135760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610957565b61352160008383600161308d565b6000818152600260205260409020546001600160a01b0316156135865760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610957565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160a01b038116811461232957600080fd5b6000806040838503121561361957600080fd5b82359150602083013561362b816135f1565b809150509250929050565b6001600160e01b03198116811461232957600080fd5b60006020828403121561365e57600080fd5b813561114081613636565b60008060006060848603121561367e57600080fd5b505081359360208301359350604090920135919050565b6000602082840312156136a757600080fd5b5035919050565b60005b838110156136c95781810151838201526020016136b1565b50506000910152565b600081518084526136ea8160208601602086016136ae565b601f01601f19169290920160200192915050565b60208152600061114060208301846136d2565b6000806040838503121561372457600080fd5b823561372f816135f1565b946020939093013593505050565b6000806040838503121561375057600080fd5b50508035926020909101359150565b60008060006060848603121561377457600080fd5b833561377f816135f1565b9250602084013561378f816135f1565b929592945050506040919091013590565b60008083601f8401126137b257600080fd5b5081356001600160401b038111156137c957600080fd5b6020830191508360208260051b85010111156137e457600080fd5b9250929050565b600080602083850312156137fe57600080fd5b82356001600160401b0381111561381457600080fd5b613820858286016137a0565b90969095509350505050565b6000602080830181845280855180835260408601915060408160051b87010192508387016000805b838110156138a857888603603f19018552825180518088529088019088880190845b818110156138925783518352928a0192918a0191600101613876565b5090975050509386019391860191600101613854565b509398975050505050505050565b6000806000604084860312156138cb57600080fd5b83356001600160401b038111156138e157600080fd5b6138ed868287016137a0565b909790965060209590950135949350505050565b60006020828403121561391357600080fd5b8135611140816135f1565b6000806000806080858703121561393457600080fd5b8435935060208501359250604085013561394d816135f1565b9396929550929360600135925050565b602080825282518282018190526000919060409081850190868401855b828110156139a9578151805185528681015187860152850151858501526060909301929085019060010161397a565b5091979650505050505050565b6000806000604084860312156139cb57600080fd5b83356001600160401b038111156139e157600080fd5b6139ed868287016137a0565b9094509250506020840135613a01816135f1565b809150509250925092565b60008060408385031215613a1f57600080fd5b8235613a2a816135f1565b91506020830135801515811461362b57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715613a7d57613a7d613a3f565b604052919050565b60008060008060808587031215613a9b57600080fd5b8435613aa6816135f1565b9350602085810135613ab7816135f1565b93506040860135925060608601356001600160401b0380821115613ada57600080fd5b818801915088601f830112613aee57600080fd5b813581811115613b0057613b00613a3f565b613b12601f8201601f19168501613a55565b91508082528984828501011115613b2857600080fd5b808484018584013760008482840101525080935050505092959194509250565b60008060408385031215613b5b57600080fd5b8235613b66816135f1565b9150602083013561362b816135f1565b600080600060608486031215613b8b57600080fd5b83359250602080850135925060408501356001600160401b0380821115613bb157600080fd5b818701915087601f830112613bc557600080fd5b813581811115613bd757613bd7613a3f565b8060051b9150613be8848301613a55565b818152918301840191848101908a841115613c0257600080fd5b938501935b83851015613c2c5784359250613c1c836135f1565b8282529385019390850190613c07565b8096505050505050509250925092565b634e487b7160e01b600052603260045260246000fd5b60208082526010908201526f34b73b30b634b210323ab930ba34b7b760811b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b808201808211156109fb576109fb613c7c565b600181811c90821680613cb957607f821691505b602082108103613cd957634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b80820281158282048414176109fb576109fb613c7c565b602080825260129082015271696e76616c696420706172616d657465727360701b604082015260600190565b60208082526011908201527034b73b30b634b21037b832b930ba34b7b760791b604082015260600190565b6060808252810184905260006001600160fb1b03851115613dba57600080fd5b8460051b8087608085013760208301949094525060408101919091520160800192915050565b60008351613df28184602088016136ae565b835190830190613e068183602088016136ae565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613ed9908301846136d2565b9695505050505050565b600060208284031215613ef557600080fd5b815161114081613636565b818103818111156109fb576109fb613c7c56fea2646970667358221220363250bb8b8a89b6bd6144d6e10513e72fecd387ea46cd2679517a96409386b564736f6c63430008120033`
	_stakingContractABI      = `[
		{
			"inputs": [],
			"stateMutability": "nonpayable",
			"type": "constructor"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "amount",
					"type": "uint256"
				}
			],
			"name": "AmountIncreased",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "approved",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "Approval",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "operator",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "bool",
					"name": "approved",
					"type": "bool"
				}
			],
			"name": "ApprovalForAll",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "amount",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "duration",
					"type": "uint256"
				}
			],
			"name": "BucketExpanded",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "amount",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "duration",
					"type": "uint256"
				}
			],
			"name": "BucketTypeActivated",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "amount",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "duration",
					"type": "uint256"
				}
			],
			"name": "BucketTypeDeactivated",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "address",
					"name": "newDelegate",
					"type": "address"
				}
			],
			"name": "DelegateChanged",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "duration",
					"type": "uint256"
				}
			],
			"name": "DurationExtended",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "duration",
					"type": "uint256"
				}
			],
			"name": "Locked",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "uint256[]",
					"name": "tokenIds",
					"type": "uint256[]"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "amount",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "duration",
					"type": "uint256"
				}
			],
			"name": "Merged",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "previousOwner",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "newOwner",
					"type": "address"
				}
			],
			"name": "OwnershipTransferred",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "Paused",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "address",
					"name": "delegate",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "amount",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "duration",
					"type": "uint256"
				}
			],
			"name": "Staked",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "Transfer",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "Unlocked",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "Unpaused",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "Unstaked",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "recipient",
					"type": "address"
				}
			],
			"name": "Withdrawal",
			"type": "event"
		},
		{
			"inputs": [],
			"name": "UINT256_MAX",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "UNSTAKE_FREEZE_BLOCKS",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_amount",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "_duration",
					"type": "uint256"
				}
			],
			"name": "activateBucketType",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_amount",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "_duration",
					"type": "uint256"
				}
			],
			"name": "addBucketType",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "approve",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				}
			],
			"name": "balanceOf",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_tokenId",
					"type": "uint256"
				}
			],
			"name": "blocksToUnstake",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_tokenId",
					"type": "uint256"
				}
			],
			"name": "blocksToWithdraw",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_tokenId",
					"type": "uint256"
				}
			],
			"name": "bucketOf",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "amount_",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "duration_",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "unlockedAt_",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "unstakedAt_",
					"type": "uint256"
				},
				{
					"internalType": "address",
					"name": "delegate_",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_offset",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "_size",
					"type": "uint256"
				}
			],
			"name": "bucketTypes",
			"outputs": [
				{
					"components": [
						{
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						},
						{
							"internalType": "uint256",
							"name": "duration",
							"type": "uint256"
						},
						{
							"internalType": "uint256",
							"name": "activatedAt",
							"type": "uint256"
						}
					],
					"internalType": "struct BucketType[]",
					"name": "types_",
					"type": "tuple[]"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_tokenId",
					"type": "uint256"
				},
				{
					"internalType": "address",
					"name": "_delegate",
					"type": "address"
				}
			],
			"name": "changeDelegate",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256[]",
					"name": "_tokenIds",
					"type": "uint256[]"
				},
				{
					"internalType": "address",
					"name": "_delegate",
					"type": "address"
				}
			],
			"name": "changeDelegates",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_amount",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "_duration",
					"type": "uint256"
				}
			],
			"name": "deactivateBucketType",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_tokenId",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "_newAmount",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "_newDuration",
					"type": "uint256"
				}
			],
			"name": "expandBucket",
			"outputs": [],
			"stateMutability": "payable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_tokenId",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "_newDuration",
					"type": "uint256"
				}
			],
			"name": "extendDuration",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "getApproved",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_tokenId",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "_newAmount",
					"type": "uint256"
				}
			],
			"name": "increaseAmount",
			"outputs": [],
			"stateMutability": "payable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_amount",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "_duration",
					"type": "uint256"
				}
			],
			"name": "isActiveBucketType",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "operator",
					"type": "address"
				}
			],
			"name": "isApprovedForAll",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_tokenId",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "_duration",
					"type": "uint256"
				}
			],
			"name": "lock",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256[]",
					"name": "_tokenIds",
					"type": "uint256[]"
				},
				{
					"internalType": "uint256",
					"name": "_duration",
					"type": "uint256"
				}
			],
			"name": "lock",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address[]",
					"name": "_delegates",
					"type": "address[]"
				}
			],
			"name": "lockedVotesTo",
			"outputs": [
				{
					"internalType": "uint256[][]",
					"name": "counts_",
					"type": "uint256[][]"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256[]",
					"name": "tokenIds",
					"type": "uint256[]"
				},
				{
					"internalType": "uint256",
					"name": "_newDuration",
					"type": "uint256"
				}
			],
			"name": "merge",
			"outputs": [],
			"stateMutability": "payable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "name",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "numOfBucketTypes",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "owner",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "ownerOf",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "pause",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "paused",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "renounceOwnership",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "safeTransferFrom",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				},
				{
					"internalType": "bytes",
					"name": "data",
					"type": "bytes"
				}
			],
			"name": "safeTransferFrom",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "operator",
					"type": "address"
				},
				{
					"internalType": "bool",
					"name": "approved",
					"type": "bool"
				}
			],
			"name": "setApprovalForAll",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_amount",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "_duration",
					"type": "uint256"
				},
				{
					"internalType": "address",
					"name": "_delegate",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "_count",
					"type": "uint256"
				}
			],
			"name": "stake",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "firstTokenId_",
					"type": "uint256"
				}
			],
			"stateMutability": "payable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_duration",
					"type": "uint256"
				},
				{
					"internalType": "address",
					"name": "_delegate",
					"type": "address"
				}
			],
			"name": "stake",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "payable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_amount",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "_duration",
					"type": "uint256"
				},
				{
					"internalType": "address[]",
					"name": "_delegates",
					"type": "address[]"
				}
			],
			"name": "stake",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "firstTokenId_",
					"type": "uint256"
				}
			],
			"stateMutability": "payable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "bytes4",
					"name": "interfaceId",
					"type": "bytes4"
				}
			],
			"name": "supportsInterface",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "symbol",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "tokenURI",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "transferFrom",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "newOwner",
					"type": "address"
				}
			],
			"name": "transferOwnership",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256[]",
					"name": "_tokenIds",
					"type": "uint256[]"
				}
			],
			"name": "unlock",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_tokenId",
					"type": "uint256"
				}
			],
			"name": "unlock",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address[]",
					"name": "_delegates",
					"type": "address[]"
				}
			],
			"name": "unlockedVotesTo",
			"outputs": [
				{
					"internalType": "uint256[][]",
					"name": "counts_",
					"type": "uint256[][]"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "unpause",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_tokenId",
					"type": "uint256"
				}
			],
			"name": "unstake",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256[]",
					"name": "_tokenIds",
					"type": "uint256[]"
				}
			],
			"name": "unstake",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_tokenId",
					"type": "uint256"
				},
				{
					"internalType": "address payable",
					"name": "_recipient",
					"type": "address"
				}
			],
			"name": "withdraw",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256[]",
					"name": "_tokenIds",
					"type": "uint256[]"
				},
				{
					"internalType": "address payable",
					"name": "_recipient",
					"type": "address"
				}
			],
			"name": "withdraw",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		}
	]`
	_stakingContractAddress = "io19ys8f4uhwms6lq6ulexr5fwht9gsjes8mvuugd"
	_adminID                = 22
)

var (
	_delegates = []common.Address{
		common.BytesToAddress(identityset.Address(0).Bytes()),
		common.BytesToAddress(identityset.Address(1).Bytes()),
		common.BytesToAddress(identityset.Address(2).Bytes()),
		common.BytesToAddress(identityset.Address(3).Bytes()),
		common.BytesToAddress(identityset.Address(4).Bytes()),
		common.BytesToAddress(identityset.Address(5).Bytes()),
		common.BytesToAddress(identityset.Address(6).Bytes()),
	}
)

func TestContractStaking(t *testing.T) {
	r := require.New(t)
	// prepare blockchain
	adminID := _adminID
	ctx := context.Background()
	cfg := config.Default
	cfg.Chain.ProducerPrivKey = identityset.PrivateKey(adminID).HexString()
	cfg.Chain.EnableTrielessStateDB = false
	cfg.Genesis.InitBalanceMap[identityset.Address(adminID).String()] = "1000000000000000000000000000"

	bc, sf, dao, ap, indexer := prepareContractStakingBlockchain(ctx, cfg, r)
	defer func() {
		r.NoError(bc.Stop(ctx))
	}()
	ctx = genesis.WithGenesisContext(context.Background(), bc.Genesis())

	// deploy smart contract
	deployAddr := _stakingContractAddress
	param := callParam{
		contractAddr: deployAddr,
		bytecode:     _stakingContractByteCode,
		amount:       big.NewInt(0),
		gasLimit:     20000000,
		gasPrice:     big.NewInt(0),
		sk:           identityset.PrivateKey(adminID),
	}
	contractAddresses := deployContracts(bc, sf, dao, ap, &param, r)
	r.Equal(deployAddr, contractAddresses)
	lsdABI, err := abi.JSON(strings.NewReader(_stakingContractABI))
	r.NoError(err)

	// init bucket type
	bucketTypes := []struct {
		amount   int64
		duration int64
	}{
		{10, 100},
		{10, 10},
		{100, 100},
		{100, 10},
	}
	params := []*callParam{}
	for i := range bucketTypes {
		data, err := lsdABI.Pack("addBucketType", big.NewInt(bucketTypes[i].amount), big.NewInt(bucketTypes[i].duration))
		r.NoError(err)
		param := callParam{
			contractAddr: contractAddresses,
			bytecode:     hex.EncodeToString(data),
			amount:       big.NewInt(0),
			gasLimit:     1000000,
			gasPrice:     big.NewInt(0),
			sk:           identityset.PrivateKey(adminID),
		}
		params = append(params, &param)
	}
	receipts, _ := writeContract(bc, sf, dao, ap, params, r)
	r.Len(receipts, len(params))
	for _, receipt := range receipts {
		r.EqualValues(iotextypes.ReceiptStatus_Success, receipt.Status)
	}

	simpleStake := func(cand common.Address, amount, duration *big.Int) *contractstaking.Bucket {
		return stake(lsdABI, bc, sf, dao, ap, contractAddresses, indexer, r, cand, amount, duration)
	}

	t.Run("stake", func(t *testing.T) {
		delegateIdx := 2
		delegate := _delegates[delegateIdx]
		data, err := lsdABI.Pack("stake0", big.NewInt(10), delegate)
		r.NoError(err)
		param := callParam{
			contractAddr: contractAddresses,
			bytecode:     hex.EncodeToString(data),
			amount:       big.NewInt(10),
			gasLimit:     1000000,
			gasPrice:     big.NewInt(0),
			sk:           identityset.PrivateKey(adminID),
		}
		receipts, blk := writeContract(bc, sf, dao, ap, []*callParam{&param}, r)
		r.Len(receipts, 1)
		r.EqualValues(iotextypes.ReceiptStatus_Success, receipts[0].Status)
		buckets, err := indexer.Buckets()
		r.NoError(err)
		slices.SortFunc(buckets, func(i, j *contractstaking.Bucket) bool {
			return i.Index < j.Index
		})
		bt := buckets[len(buckets)-1]
		tokenID := bt.Index
		r.EqualValues(1, bt.Index)
		r.True(bt.AutoStake)
		r.Equal(identityset.Address(delegateIdx).String(), bt.Candidate.String())
		r.EqualValues(identityset.PrivateKey(adminID).PublicKey().Address().String(), bt.Owner.String())
		r.EqualValues(0, bt.StakedAmount.Cmp(big.NewInt(10)))
		r.EqualValues(10, bt.StakedDurationBlockNumber)
		r.EqualValues(blk.Height(), bt.CreateBlockHeight)
		r.EqualValues(blk.Height(), bt.StakeStartBlockHeight)
		r.True(bt.UnstakeStartBlockHeight == math.MaxUint64)
		r.EqualValues(10, indexer.CandidateVotes(identityset.Address(delegateIdx)).Int64())
		r.EqualValues(1, indexer.TotalBucketCount())
		r.EqualValues(contractAddresses, bt.ContractAddress)
		buckets, err = indexer.BucketsByCandidate(identityset.Address(delegateIdx))
		r.NoError(err)
		r.Len(buckets, 1)
		r.EqualValues(bt, buckets[0])

		t.Run("unlock", func(t *testing.T) {
			data, err = lsdABI.Pack("unlock0", big.NewInt(int64(bt.Index)))
			r.NoError(err)
			param = callParam{
				contractAddr: contractAddresses,
				bytecode:     hex.EncodeToString(data),
				amount:       big.NewInt(0),
				gasLimit:     1000000,
				gasPrice:     big.NewInt(0),
				sk:           identityset.PrivateKey(adminID),
			}
			receipts, blk = writeContract(bc, sf, dao, ap, []*callParam{&param}, r)
			r.Len(receipts, 1)
			r.EqualValues("", receipts[0].ExecutionRevertMsg())
			r.EqualValues(iotextypes.ReceiptStatus_Success, receipts[0].Status)
			bt, ok := indexer.Bucket(uint64(tokenID))
			r.True(ok)
			r.EqualValues(blk.Height(), bt.StakeStartBlockHeight)
			r.EqualValues(10, indexer.CandidateVotes(identityset.Address(delegateIdx)).Int64())
			r.EqualValues(1, indexer.TotalBucketCount())

			t.Run("unstake", func(t *testing.T) {
				jumpBlocks(bc, 10, r)
				data, err = lsdABI.Pack("unstake", big.NewInt(int64(bt.Index)))
				r.NoError(err)
				param = callParam{
					contractAddr: contractAddresses,
					bytecode:     hex.EncodeToString(data),
					amount:       big.NewInt(0),
					gasLimit:     1000000,
					gasPrice:     big.NewInt(0),
					sk:           identityset.PrivateKey(adminID),
				}
				receipts, blk = writeContract(bc, sf, dao, ap, []*callParam{&param}, r)
				r.Len(receipts, 1)
				r.EqualValues("", receipts[0].ExecutionRevertMsg())
				r.EqualValues(iotextypes.ReceiptStatus_Success, receipts[0].Status)
				bt, ok := indexer.Bucket(uint64(tokenID))
				r.True(ok)
				r.EqualValues(blk.Height(), bt.UnstakeStartBlockHeight)
				r.EqualValues(0, indexer.CandidateVotes(identityset.Address(delegateIdx)).Int64())
				r.EqualValues(1, indexer.TotalBucketCount())

				t.Run("withdraw", func(t *testing.T) {
					// freeze blocks are changed to 10 in test
					jumpBlocks(bc, 10, r)
					tokenID := bt.Index

					addr := common.BytesToAddress(identityset.PrivateKey(adminID).PublicKey().Bytes())
					data, err := lsdABI.Pack("withdraw", big.NewInt(int64(tokenID)), addr)
					r.NoError(err)
					param = callParam{
						contractAddr: contractAddresses,
						bytecode:     hex.EncodeToString(data),
						amount:       big.NewInt(0),
						gasLimit:     1000000,
						gasPrice:     big.NewInt(0),
						sk:           identityset.PrivateKey(adminID),
					}
					receipts, _ = writeContract(bc, sf, dao, ap, []*callParam{&param}, r)
					r.Len(receipts, 1)
					r.EqualValues("", receipts[0].ExecutionRevertMsg())
					r.EqualValues(iotextypes.ReceiptStatus_Success, receipts[0].Status)
					bt, ok = indexer.Bucket(uint64(tokenID))
					r.False(ok)
					r.EqualValues(1, indexer.TotalBucketCount())
				})
			})
		})
	})

	t.Run("lock & unlock", func(t *testing.T) {
		bt := simpleStake(_delegates[3], big.NewInt(10), big.NewInt(10))
		tokenID := bt.Index

		data, err := lsdABI.Pack("unlock0", big.NewInt(int64(bt.Index)))
		r.NoError(err)
		param = callParam{
			contractAddr: contractAddresses,
			bytecode:     hex.EncodeToString(data),
			amount:       big.NewInt(0),
			gasLimit:     1000000,
			gasPrice:     big.NewInt(0),
			sk:           identityset.PrivateKey(adminID),
		}
		receipts, _ = writeContract(bc, sf, dao, ap, []*callParam{&param}, r)
		r.Len(receipts, 1)
		r.EqualValues("", receipts[0].ExecutionRevertMsg())
		r.EqualValues(iotextypes.ReceiptStatus_Success, receipts[0].Status)

		data, err = lsdABI.Pack("lock", big.NewInt(int64(bt.Index)), big.NewInt(10))
		r.NoError(err)
		param = callParam{
			contractAddr: contractAddresses,
			bytecode:     hex.EncodeToString(data),
			amount:       big.NewInt(0),
			gasLimit:     1000000,
			gasPrice:     big.NewInt(0),
			sk:           identityset.PrivateKey(adminID),
		}
		receipts, _ := writeContract(bc, sf, dao, ap, []*callParam{&param}, r)
		r.Len(receipts, 1)
		r.EqualValues("", receipts[0].ExecutionRevertMsg())
		r.EqualValues(iotextypes.ReceiptStatus_Success, receipts[0].Status)
		bt, ok := indexer.Bucket(uint64(tokenID))
		r.True(ok)
		r.True(bt.AutoStake)
	})
	t.Run("merge", func(t *testing.T) {
		// stake 10 bucket
		candName := "delegate3"
		params := []*callParam{}
		for i := 0; i < 10; i++ {
			delegate := [12]byte{}
			copy(delegate[:], []byte(candName))
			data, err := lsdABI.Pack("stake0", big.NewInt(10), delegate)
			r.NoError(err)
			param := callParam{
				contractAddr: contractAddresses,
				bytecode:     hex.EncodeToString(data),
				amount:       big.NewInt(10),
				gasLimit:     1000000,
				gasPrice:     big.NewInt(0),
				sk:           identityset.PrivateKey(adminID),
			}
			params = append(params, &param)
		}
		receipts, _ := writeContract(bc, sf, dao, ap, params, r)
		r.Len(receipts, len(params))
		for _, receipt := range receipts {
			r.EqualValues(iotextypes.ReceiptStatus_Success, receipt.Status)
		}
		buckets, err := indexer.Buckets()
		r.NoError(err)
		slices.SortFunc(buckets, func(i, j *contractstaking.Bucket) bool {
			return i.Index < j.Index
		})
		r.True(len(buckets) >= 10)
		// merge
		newBuckets := buckets[len(buckets)-10:]
		tokens := []*big.Int{}
		for _, bucket := range newBuckets {
			tokens = append(tokens, big.NewInt(int64(bucket.Index)))
		}
		data, err := lsdABI.Pack("merge", tokens, big.NewInt(100))
		r.NoError(err)
		param := callParam{
			contractAddr: contractAddresses,
			bytecode:     hex.EncodeToString(data),
			amount:       big.NewInt(0),
			gasLimit:     1000000,
			gasPrice:     big.NewInt(0),
			sk:           identityset.PrivateKey(adminID),
		}
		receipts, _ = writeContract(bc, sf, dao, ap, []*callParam{&param}, r)
		r.Len(receipts, 1)
		r.EqualValues("", receipts[0].ExecutionRevertMsg())
		r.EqualValues(iotextypes.ReceiptStatus_Success, receipts[0].Status)
		for i := range newBuckets {
			if i == 0 {
				bt, ok := indexer.Bucket(uint64(newBuckets[i].Index))
				r.True(ok)
				r.EqualValues(100, bt.StakedDurationBlockNumber)
			} else {
				_, ok := indexer.Bucket(uint64(newBuckets[i].Index))
				r.False(ok)
			}
		}
	})

	t.Run("extend duration", func(t *testing.T) {
		// stake
		bt := simpleStake(_delegates[3], big.NewInt(10), big.NewInt(10))
		tokenID := bt.Index
		r.EqualValues(10, bt.StakedDurationBlockNumber)
		// extend duration
		data, err := lsdABI.Pack("extendDuration", big.NewInt(int64(tokenID)), big.NewInt(100))
		r.NoError(err)
		param = callParam{
			contractAddr: contractAddresses,
			bytecode:     hex.EncodeToString(data),
			amount:       big.NewInt(0),
			gasLimit:     1000000,
			gasPrice:     big.NewInt(0),
			sk:           identityset.PrivateKey(adminID),
		}
		receipts, _ = writeContract(bc, sf, dao, ap, []*callParam{&param}, r)
		r.Len(receipts, 1)
		r.EqualValues(iotextypes.ReceiptStatus_Success, receipts[0].Status)
		bt, ok := indexer.Bucket(uint64(tokenID))
		r.True(ok)
		r.EqualValues(100, bt.StakedDurationBlockNumber)
	})

	t.Run("increase amount", func(t *testing.T) {
		bt := simpleStake(_delegates[4], big.NewInt(10), big.NewInt(10))
		tokenID := bt.Index

		data, err := lsdABI.Pack("increaseAmount", big.NewInt(int64(tokenID)), big.NewInt(100))
		r.NoError(err)
		param = callParam{
			contractAddr: contractAddresses,
			bytecode:     hex.EncodeToString(data),
			amount:       big.NewInt(90),
			gasLimit:     1000000,
			gasPrice:     big.NewInt(0),
			sk:           identityset.PrivateKey(adminID),
		}
		receipts, _ = writeContract(bc, sf, dao, ap, []*callParam{&param}, r)
		r.Len(receipts, 1)
		r.EqualValues("", receipts[0].ExecutionRevertMsg())
		r.EqualValues(iotextypes.ReceiptStatus_Success, receipts[0].Status)
		bt, ok := indexer.Bucket(uint64(tokenID))
		r.True(ok)
		r.EqualValues(100, bt.StakedAmount.Int64())
	})

	t.Run("expand bucket type", func(t *testing.T) {
		bt := simpleStake(_delegates[4], big.NewInt(10), big.NewInt(10))
		tokenID := bt.Index

		data, err := lsdABI.Pack("expandBucket", big.NewInt(int64(tokenID)), big.NewInt(100), big.NewInt(100))
		r.NoError(err)
		param = callParam{
			contractAddr: contractAddresses,
			bytecode:     hex.EncodeToString(data),
			amount:       big.NewInt(90),
			gasLimit:     1000000,
			gasPrice:     big.NewInt(0),
			sk:           identityset.PrivateKey(adminID),
		}
		receipts, _ = writeContract(bc, sf, dao, ap, []*callParam{&param}, r)
		r.Len(receipts, 1)
		r.EqualValues("", receipts[0].ExecutionRevertMsg())
		r.EqualValues(iotextypes.ReceiptStatus_Success, receipts[0].Status)
		bt, ok := indexer.Bucket(uint64(tokenID))
		r.True(ok)
		r.EqualValues(100, bt.StakedAmount.Int64())
		r.EqualValues(100, bt.StakedDurationBlockNumber)
	})

	t.Run("change delegate", func(t *testing.T) {
		delegateIdx := 5
		bt := simpleStake(_delegates[delegateIdx], big.NewInt(10), big.NewInt(10))
		tokenID := bt.Index
		r.EqualValues(identityset.Address(delegateIdx).String(), bt.Candidate.String())

		delegateIdx = 6
		delegate := _delegates[delegateIdx]
		data, err := lsdABI.Pack("changeDelegate", big.NewInt(int64(tokenID)), delegate)
		r.NoError(err)
		param = callParam{
			contractAddr: contractAddresses,
			bytecode:     hex.EncodeToString(data),
			amount:       big.NewInt(0),
			gasLimit:     1000000,
			gasPrice:     big.NewInt(0),
			sk:           identityset.PrivateKey(adminID),
		}
		receipts, _ = writeContract(bc, sf, dao, ap, []*callParam{&param}, r)
		r.Len(receipts, 1)
		r.EqualValues("", receipts[0].ExecutionRevertMsg())
		r.EqualValues(iotextypes.ReceiptStatus_Success, receipts[0].Status)
		bt, ok := indexer.Bucket(uint64(tokenID))
		r.True(ok)
		r.EqualValues(identityset.Address(delegateIdx).String(), bt.Candidate.String())
	})

}

func prepareContractStakingBlockchain(ctx context.Context, cfg config.Config, r *require.Assertions) (blockchain.Blockchain, factory.Factory, blockdao.BlockDAO, actpool.ActPool, *contractstaking.Indexer) {
	defer func() {
		delete(cfg.Plugins, config.GatewayPlugin)
	}()
	cfg.Plugins[config.GatewayPlugin] = true
	cfg.Chain.EnableAsyncIndexWrite = false
	cfg.Genesis.EnableGravityChainVoting = false
	testTriePath, err := testutil.PathOfTempFile("trie")
	r.NoError(err)
	defer testutil.CleanupPath(testTriePath)
	testContractStakeIndexerPath, err := testutil.PathOfTempFile("contractstakeindexer")
	r.NoError(err)
	defer testutil.CleanupPath(testContractStakeIndexerPath)

	cfg.Chain.TrieDBPath = testTriePath
	cfg.ActPool.MinGasPriceStr = "0"

	cfg.Genesis.Blockchain.AleutianBlockHeight = 0
	cfg.Genesis.Blockchain.BeringBlockHeight = 0

	cfg.Genesis.HawaiiBlockHeight = 0

	cfg.Genesis.CookBlockHeight = 0
	cfg.Genesis.DardanellesBlockHeight = 0
	cfg.Genesis.DaytonaBlockHeight = 0
	cfg.Genesis.EasterBlockHeight = 0
	cfg.Genesis.FbkMigrationBlockHeight = 0
	cfg.Genesis.FairbankBlockHeight = 0
	cfg.Genesis.GreenlandBlockHeight = 0
	cfg.Genesis.IcelandBlockHeight = 0

	// London is enabled at okhotsk height
	cfg.Genesis.Blockchain.JutlandBlockHeight = 0
	cfg.Genesis.Blockchain.KamchatkaBlockHeight = 0
	cfg.Genesis.Blockchain.LordHoweBlockHeight = 0
	cfg.Genesis.Blockchain.MidwayBlockHeight = 0
	cfg.Genesis.Blockchain.NewfoundlandBlockHeight = 0
	cfg.Genesis.Blockchain.OkhotskBlockHeight = 0

	registry := protocol.NewRegistry()
	acc := account.NewProtocol(rewarding.DepositGas)
	r.NoError(acc.Register(registry))
	rp := rolldpos.NewProtocol(cfg.Genesis.NumCandidateDelegates, cfg.Genesis.NumDelegates, cfg.Genesis.NumSubEpochs)
	r.NoError(rp.Register(registry))
	// create state factory
	var sf factory.Factory
	var daoKV db.KVStore

	factoryCfg := factory.GenerateConfig(cfg.Chain, cfg.Genesis)
	if cfg.Chain.EnableTrielessStateDB {
		if cfg.Chain.EnableStateDBCaching {
			daoKV, err = db.CreateKVStoreWithCache(cfg.DB, cfg.Chain.TrieDBPath, cfg.Chain.StateDBCacheSize)
		} else {
			daoKV, err = db.CreateKVStore(cfg.DB, cfg.Chain.TrieDBPath)
		}
		r.NoError(err)
		sf, err = factory.NewStateDB(factoryCfg, daoKV, factory.RegistryStateDBOption(registry))
	} else {
		sf, err = factory.NewFactory(factoryCfg, db.NewMemKVStore(), factory.RegistryOption(registry))
	}
	r.NoError(err)
	ap, err := actpool.NewActPool(cfg.Genesis, sf, cfg.ActPool)
	r.NoError(err)
	// create indexer
	indexer, err := blockindex.NewIndexer(db.NewMemKVStore(), cfg.Genesis.Hash())
	r.NoError(err)
	cc := cfg.DB
	cc.DbPath = testContractStakeIndexerPath
	contractStakeIndexer, err := contractstaking.NewContractStakingIndexer(db.NewBoltDB(cc), _stakingContractAddress, 0)
	r.NoError(err)
	// create BlockDAO
	dao := blockdao.NewBlockDAOInMemForTest([]blockdao.BlockIndexer{sf, indexer, contractStakeIndexer})
	r.NotNil(dao)
	bc := blockchain.NewBlockchain(
		cfg.Chain,
		cfg.Genesis,
		dao,
		factory.NewMinter(sf, ap),
		blockchain.BlockValidatorOption(block.NewValidator(
			sf,
			protocol.NewGenericValidator(sf, accountutil.AccountState),
		)),
	)
	// reward := rewarding.NewProtocol(cfg.Genesis.Rewarding)
	// r.NoError(reward.Register(registry))

	r.NotNil(bc)
	execution := execution.NewProtocol(dao.GetBlockHash, rewarding.DepositGasWithSGD, nil)
	r.NoError(execution.Register(registry))
	r.NoError(bc.Start(ctx))

	return bc, sf, dao, ap, contractStakeIndexer
}

func deployContracts(
	bc blockchain.Blockchain,
	sf factory.Factory,
	dao blockdao.BlockDAO,
	ap actpool.ActPool,
	param *callParam,
	r *require.Assertions,
) (contractAddresses string) {
	sk := param.sk
	bytecode, err := hex.DecodeString(param.bytecode)
	r.NoError(err)
	state, err := accountutil.AccountState(genesis.WithGenesisContext(context.Background(), bc.Genesis()), sf, sk.PublicKey().Address())
	r.NoError(err)
	nonce := state.PendingNonce()
	amount := param.amount
	gasLimit := param.gasLimit
	gasPrice := param.gasPrice
	exec, err := action.NewExecutionWithAccessList(action.EmptyAddress, nonce, amount, gasLimit, gasPrice, bytecode, nil)
	r.NoError(err)
	builder := &action.EnvelopeBuilder{}
	elp := builder.SetAction(exec).
		SetNonce(exec.Nonce()).
		SetGasLimit(gasLimit).
		SetGasPrice(gasPrice).
		Build()
	selp, err := action.Sign(elp, sk)
	r.NoError(err)
	err = ap.Add(context.Background(), selp)
	r.NoError(err)
	selpHash, err := selp.Hash()

	blk, err := bc.MintNewBlock(testutil.TimestampNow())
	r.NoError(err)
	err = bc.CommitBlock(blk)
	r.NoError(err)

	receipt, err := dao.GetReceiptByActionHash(selpHash, blk.Height())
	r.NoError(err)
	r.NotNil(receipt)
	r.Equal(uint64(iotextypes.ReceiptStatus_Success), receipt.Status)

	return receipt.ContractAddress
}

type callParam struct {
	contractAddr string
	bytecode     string
	amount       *big.Int
	gasLimit     uint64
	gasPrice     *big.Int
	sk           crypto.PrivateKey
}

func writeContract(bc blockchain.Blockchain,
	sf factory.Factory,
	dao blockdao.BlockDAO,
	ap actpool.ActPool,
	params []*callParam,
	r *require.Assertions,
) ([]*action.Receipt, *block.Block) {
	nonces := map[string]uint64{}
	hashes := []hash.Hash256{}
	for _, param := range params {
		nonce := uint64(1)
		var ok bool
		sk := param.sk
		executor := sk.PublicKey().Address()
		if nonce, ok = nonces[executor.String()]; !ok {
			state, err := accountutil.AccountState(genesis.WithGenesisContext(context.Background(), bc.Genesis()), sf, executor)
			r.NoError(err)
			nonce = state.PendingNonce()
		} else {
			nonce++
		}
		nonces[executor.String()] = nonce

		amount := param.amount
		gasLimit := param.gasLimit
		gasPrice := param.gasPrice
		bytecode, err := hex.DecodeString(param.bytecode)
		r.NoError(err)
		exec, err := action.NewExecutionWithAccessList(param.contractAddr, nonce, amount, gasLimit, gasPrice, bytecode, nil)
		r.NoError(err)
		builder := &action.EnvelopeBuilder{}
		elp := builder.SetAction(exec).
			SetNonce(exec.Nonce()).
			SetGasLimit(gasLimit).
			SetGasPrice(gasPrice).
			Build()
		selp, err := action.Sign(elp, sk)
		r.NoError(err)
		err = ap.Add(context.Background(), selp)
		r.NoError(err)
		selpHash, err := selp.Hash()
		hashes = append(hashes, selpHash)
	}

	blk, err := bc.MintNewBlock(testutil.TimestampNow())
	r.NoError(err)
	err = bc.CommitBlock(blk)
	r.NoError(err)

	receipts := []*action.Receipt{}
	for _, hash := range hashes {
		receipt, err := dao.GetReceiptByActionHash(hash, blk.Height())
		r.NoError(err)
		receipts = append(receipts, receipt)
	}
	return receipts, blk
}

func jumpBlocks(bc blockchain.Blockchain, count int, r *require.Assertions) {
	for i := 0; i < count; i++ {
		blk, err := bc.MintNewBlock(testutil.TimestampNow())
		r.NoError(err)
		err = bc.CommitBlock(blk)
		r.NoError(err)
	}
}

func stake(lsdABI abi.ABI, bc blockchain.Blockchain, sf factory.Factory, dao blockdao.BlockDAO, ap actpool.ActPool, contractAddresses string, indexer *contractstaking.Indexer, r *require.Assertions, cand common.Address, amount, duration *big.Int) *contractstaking.Bucket {
	delegate := cand
	data, err := lsdABI.Pack("stake0", duration, delegate)
	r.NoError(err)
	param := callParam{
		contractAddr: contractAddresses,
		bytecode:     hex.EncodeToString(data),
		amount:       amount,
		gasLimit:     1000000,
		gasPrice:     big.NewInt(0),
		sk:           identityset.PrivateKey(_adminID),
	}
	receipts, _ := writeContract(bc, sf, dao, ap, []*callParam{&param}, r)
	r.Len(receipts, 1)
	r.EqualValues(iotextypes.ReceiptStatus_Success, receipts[0].Status)
	buckets, err := indexer.Buckets()
	r.NoError(err)
	slices.SortFunc(buckets, func(i, j *contractstaking.Bucket) bool {
		return i.Index < j.Index
	})
	bt := buckets[len(buckets)-1]
	return bt
}
