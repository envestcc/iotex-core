package e2etest

import (
	"context"
	"encoding/hex"
	"math/big"
	"strings"
	"testing"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common"
	"github.com/iotexproject/go-pkgs/crypto"
	"github.com/iotexproject/go-pkgs/hash"
	"github.com/iotexproject/iotex-address/address"
	"github.com/iotexproject/iotex-proto/golang/iotextypes"
	"github.com/pkg/errors"
	"github.com/stretchr/testify/require"
	"golang.org/x/exp/slices"

	"github.com/iotexproject/iotex-core/action"
	"github.com/iotexproject/iotex-core/action/protocol"
	"github.com/iotexproject/iotex-core/action/protocol/account"
	accountutil "github.com/iotexproject/iotex-core/action/protocol/account/util"
	"github.com/iotexproject/iotex-core/action/protocol/execution"
	"github.com/iotexproject/iotex-core/action/protocol/rewarding"
	"github.com/iotexproject/iotex-core/action/protocol/rolldpos"
	"github.com/iotexproject/iotex-core/actpool"
	"github.com/iotexproject/iotex-core/blockchain"
	"github.com/iotexproject/iotex-core/blockchain/block"
	"github.com/iotexproject/iotex-core/blockchain/blockdao"
	"github.com/iotexproject/iotex-core/blockchain/genesis"
	"github.com/iotexproject/iotex-core/blockindex"
	"github.com/iotexproject/iotex-core/config"
	"github.com/iotexproject/iotex-core/db"
	"github.com/iotexproject/iotex-core/state/factory"
	"github.com/iotexproject/iotex-core/test/identityset"
	"github.com/iotexproject/iotex-core/testutil"
)

const (
	// _liquidStakingContractByteCode is the byte code of the liquid staking contract for testing, which changes the freeze blocks to 10
	_liquidStakingContractByteCode = `60806040523480156200001157600080fd5b5060405180604001604052806009815260200168109d58dad95d13919560ba1b815250604051806040016040528060038152602001621092d560ea1b81525081600090816200006191906200019b565b5060016200007082826200019b565b5050506200008d62000087620000a060201b60201c565b620000a4565b6006805460ff60a01b1916905562000267565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200012157607f821691505b6020821081036200014257634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200019657600081815260208120601f850160051c81016020861015620001715750805b601f850160051c820191505b8181101562000192578281556001016200017d565b5050505b505050565b81516001600160401b03811115620001b757620001b7620000f6565b620001cf81620001c884546200010c565b8462000148565b602080601f831160018114620002075760008415620001ee5750858301515b600019600386901b1c1916600185901b17855562000192565b600085815260208120601f198616915b82811015620002385788860151825594840194600190910190840162000217565b5085821015620002575787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b613dc780620002776000396000f3fe6080604052600436106102925760003560e01c806378bfca101161015a578063c87b56dd116100c1578063e0028ecf1161007a578063e0028ecf146107dd578063e449f341146107fd578063e985e9c51461081d578063eb0ffb2e14610866578063f0b56b5d14610886578063f2fde38b1461089b57600080fd5b8063c87b56dd14610741578063c8e7792314610761578063cd0a02d014610781578063d0949f9914610794578063d6605fd8146107aa578063d6819bcc146107ca57600080fd5b8063a22cb46511610113578063a22cb4651461069b578063ad46fc64146106bb578063b2383e55146106db578063b88d4fde146106ee578063b8f4bd7b1461070e578063bbe33ea51461072e57600080fd5b806378bfca10146105f15780638456cb591461061e5780638da5cb5b1461063357806393b6ef591461065157806395d89b41146106715780639f7d5b001461068657600080fd5b806342842e0e116101fe5780635d36598f116101b75780635d36598f1461053c5780636198e3391461055c5780636352211e1461057c5780636faa5c271461059c57806370a08231146105bc578063715018a6146105dc57600080fd5b806342842e0e14610458578063431cd92a1461047857806343e06c59146104ca578063597cc14a146104ea5780635c975abb146104fd5780635ceb8b5b1461051c57600080fd5b80631338736f116102505780631338736f1461039657806323b872dd146103b65780632dc83008146103d65780632e17de78146103f65780633f4ba83a146104165780633fac69af1461042b57600080fd5b8062f714ce1461029757806301ffc9a7146102b957806303459b16146102ee57806306fdde031461031c578063081812fc1461033e578063095ea7b314610376575b600080fd5b3480156102a357600080fd5b506102b76102b236600461341b565b6108bb565b005b3480156102c557600080fd5b506102d96102d4366004613461565b610982565b60405190151581526020015b60405180910390f35b3480156102fa57600080fd5b5061030e61030936600461347e565b6109d4565b6040519081526020016102e5565b34801561032857600080fd5b506103316109fa565b6040516102e591906134e7565b34801561034a57600080fd5b5061035e61035936600461347e565b610a8c565b6040516001600160a01b0390911681526020016102e5565b34801561038257600080fd5b506102b76103913660046134fa565b610ab3565b3480156103a257600080fd5b506102b76103b1366004613526565b610bc8565b3480156103c257600080fd5b506102b76103d1366004613548565b610c3b565b3480156103e257600080fd5b506102b76103f13660046135a6565b610c6c565b34801561040257600080fd5b506102b761041136600461347e565b610cda565b34801561042257600080fd5b506102b7610d89565b34801561043757600080fd5b5061044b61044636600461361d565b610d9b565b6040516102e5919061365e565b34801561046457600080fd5b506102b7610473366004613548565b610f17565b34801561048457600080fd5b5061049861049336600461347e565b610f32565b6040805195865260208601949094529284019190915260608301526001600160a01b031916608082015260a0016102e5565b3480156104d657600080fd5b506102d96104e5366004613526565b610fa8565b61030e6104f83660046135a6565b610fc3565b34801561050957600080fd5b50600654600160a01b900460ff166102d9565b34801561052857600080fd5b506102b76105373660046136e8565b611039565b34801561054857600080fd5b506102b761055736600461361d565b6110e0565b34801561056857600080fd5b506102b761057736600461347e565b611176565b34801561058857600080fd5b5061035e61059736600461347e565b6111d8565b3480156105a857600080fd5b5061044b6105b736600461361d565b611238565b3480156105c857600080fd5b5061030e6105d7366004613733565b6113ac565b3480156105e857600080fd5b506102b7611432565b3480156105fd57600080fd5b5061061161060c366004613526565b611444565b6040516102e59190613750565b34801561062a57600080fd5b506102b7611579565b34801561063f57600080fd5b506006546001600160a01b031661035e565b34801561065d57600080fd5b5061030e61066c36600461347e565b611589565b34801561067d57600080fd5b506103316115b4565b34801561069257600080fd5b50600b5461030e565b3480156106a757600080fd5b506102b76106b63660046137a9565b6115c3565b3480156106c757600080fd5b506102b76106d63660046137dc565b6115d2565b6102b76106e9366004613526565b611669565b3480156106fa57600080fd5b506102b7610709366004613875565b611771565b34801561071a57600080fd5b506102b7610729366004613938565b6117a9565b6102b761073c3660046136e8565b611898565b34801561074d57600080fd5b5061033161075c36600461347e565b611a9f565b34801561076d57600080fd5b506102b761077c366004613526565b611b12565b61030e61078f36600461398e565b611cb7565b3480156107a057600080fd5b5061030e60001981565b3480156107b657600080fd5b506102b76107c5366004613526565b611d81565b61030e6107d83660046139cb565b611e6a565b3480156107e957600080fd5b506102b76107f8366004613526565b611f5c565b34801561080957600080fd5b506102b761081836600461361d565b611fd0565b34801561082957600080fd5b506102d9610838366004613a8c565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561087257600080fd5b506102b7610881366004613526565b6120ac565b34801561089257600080fd5b5061030e600a81565b3480156108a757600080fd5b506102b76108b6366004613733565b612122565b6108c361219b565b816108cd816121e8565b600083815260086020526040902060028101546108e99061223d565b156109335760405162461bcd60e51b81526020600482015260156024820152746e6f7420726561647920746f20776974686472617760581b60448201526064015b60405180910390fd5b61093c846122b1565b6109468184612354565b6040516001600160a01b0384169085907fd964a27d45f595739c13d8b1160b57491050cacf3a2e5602207277d6228f64ee90600090a350505050565b60006001600160e01b031982166380ac58cd60e01b14806109b357506001600160e01b03198216635b5e139f60e01b145b806109ce57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006109df82612413565b6000828152600860205260409020600201546109ce9061223d565b606060008054610a0990613aba565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3590613aba565b8015610a825780601f10610a5757610100808354040283529160200191610a82565b820191906000526020600020905b815481529060010190602001808311610a6557829003601f168201915b5050505050905090565b6000610a9782612413565b506000908152600460205260409020546001600160a01b031690565b6000610abe826111d8565b9050806001600160a01b0316836001600160a01b031603610b2b5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161092a565b336001600160a01b0382161480610b475750610b478133610838565b610bb95760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000606482015260840161092a565b610bc38383612472565b505050565b610bd061219b565b81610bda816121e8565b6000838152600860205260409020610bf1816124e0565b610bfb818461252a565b837f907fece23ce39fbcbceb71e515043fe29408353fbb393b25b35eb8a70a4bad0b84604051610c2d91815260200190565b60405180910390a250505050565b610c453382612612565b610c615760405162461bcd60e51b815260040161092a90613af4565b610bc3838383612690565b610c7461219b565b81610c7e816121e8565b6000838152600860205260409020610c969083612801565b6040516001600160a01b03198316815283907ffec7db38481afeb8686a62ee7bba420143bd43540fe5e57b7316be50bdaa220c9060200160405180910390a2505050565b610ce261219b565b80610cec816121e8565b6000828152600860205260409020610d03816124e0565b610d0c81612904565b15610d505760405162461bcd60e51b81526020600482015260146024820152736e6f7420726561647920746f20756e7374616b6560601b604482015260640161092a565b610d59816129a9565b60405183907f11725367022c3ff288940f4b5473aa61c2da6a24af7363a1128ee2401e8983b290600090a2505050565b610d916129e4565b610d99612a3e565b565b6060816001600160401b03811115610db557610db561382f565b604051908082528060200260200182016040528015610de857816020015b6060815260200190600190039081610dd35790505b5090506000610df6600b5490565b905060005b83811015610f0f57816001600160401b03811115610e1b57610e1b61382f565b604051908082528060200260200182016040528015610e44578160200160208202803683370190505b50838281518110610e5757610e57613b41565b6020026020010181905250600060096000878785818110610e7a57610e7a613b41565b9050602002016020810190610e8f9190613b57565b6001600160a01b03191681526020810191909152604001600090812091505b83811015610f05576000818152602083905260409020548551869085908110610ed957610ed9613b41565b60200260200101518281518110610ef257610ef2613b41565b6020908102919091010152600101610eae565b5050600101610dfb565b505092915050565b610bc383838360405180602001604052806000815250611771565b6000806000806000610f4386612413565b60008681526008602052604081208054600b80549293929091908110610f6b57610f6b613b41565b6000918252602090912060039182020180546001918201549185015460028601549590930154909b919a5091985092965060a01b94509092505050565b6000610fbc610fb78484612a93565b612afa565b9392505050565b6000610fcd61219b565b346000610fda8286612a93565b9050610fe581612b2b565b610fef8185612b77565b60075460405181907f1f44b78b04f7c6f80fc97ae8b196d9e9d7a81663114744f18fe5d073cd70ce4a9061102890889087908b90613b72565b60405180910390a295945050505050565b61104161219b565b60008060005b848110156110d85785858281811061106157611061613b41565b905060200201359250611073836121e8565b6000838152600860205260409020915061108c826124e0565b611096828561252a565b827f907fece23ce39fbcbceb71e515043fe29408353fbb393b25b35eb8a70a4bad0b856040516110c891815260200190565b60405180910390a2600101611047565b505050505050565b6110e861219b565b60008060005b8381101561116f5784848281811061110857611108613b41565b90506020020135925061111a836121e8565b6000838152600860205260409020915061113382612c17565b61113c82612c61565b60405183907ff27b6ce5b2f5e68ddb2fd95a8a909d4ecf1daaac270935fff052feacb24f184290600090a26001016110ee565b5050505050565b61117e61219b565b80611188816121e8565b600082815260086020526040902061119f81612c17565b6111a881612c61565b60405183907ff27b6ce5b2f5e68ddb2fd95a8a909d4ecf1daaac270935fff052feacb24f184290600090a2505050565b6000818152600260205260408120546001600160a01b0316806109ce5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161092a565b6060816001600160401b038111156112525761125261382f565b60405190808252806020026020018201604052801561128557816020015b60608152602001906001900390816112705790505b5090506000611293600b5490565b905060005b83811015610f0f57816001600160401b038111156112b8576112b861382f565b6040519080825280602002602001820160405280156112e1578160200160208202803683370190505b508382815181106112f4576112f4613b41565b60200260200101819052506000600a600087878581811061131757611317613b41565b905060200201602081019061132c9190613b57565b6001600160a01b03191681526020810191909152604001600090812091505b838110156113a257600081815260208390526040902054855186908590811061137657611376613b41565b6020026020010151828151811061138f5761138f613b41565b602090810291909101015260010161134b565b5050600101611298565b60006001600160a01b0382166114165760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b606482015260840161092a565b506001600160a01b031660009081526003602052604090205490565b61143a6129e4565b610d996000612cb9565b60606000821180156114615750600b5461145e8385613baa565b11155b61147d5760405162461bcd60e51b815260040161092a90613bbd565b816001600160401b038111156114955761149561382f565b6040519080825280602002602001820160405280156114ea57816020015b6114d760405180606001604052806000815260200160008152602001600081525090565b8152602001906001900390816114b35790505b50905060005b8281101561157257600b8185018154811061150d5761150d613b41565b9060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201548152505082828151811061155657611556613b41565b602002602001018190525061156b8160010190565b90506114f0565b5092915050565b6115816129e4565b610d99612d0b565b600061159482612413565b60008281526008602052604090206115ab816124e0565b610fbc81612904565b606060018054610a0990613aba565b6115ce338383612d4e565b5050565b6115da61219b565b6000805b8381101561116f578484828181106115f8576115f8613b41565b90506020020135915061160a826121e8565b60008281526008602052604090206116229084612801565b6040516001600160a01b03198416815282907ffec7db38481afeb8686a62ee7bba420143bd43540fe5e57b7316be50bdaa220c9060200160405180910390a26001016115de565b61167161219b565b8161167b816121e8565b600083815260086020526040902061169281612c17565b8054600b805460009190839081106116ac576116ac613b41565b90600052602060002090600302019050848160000154346116cd9190613baa565b146116ea5760405162461bcd60e51b815260040161092a90613be9565b600383015460a01b6001600160a01b0319166000908152600a6020908152604080832085845290915290208054600019019055600181015461172f9084908790612e1c565b857f1d9c4d2b3e13eb9ac08a42625750ac17ec6ca94b4755c49285e9467b4e48c89d8660405161176191815260200190565b60405180910390a2505050505050565b61177b3383612612565b6117975760405162461bcd60e51b815260040161092a90613af4565b6117a384848484612e6c565b50505050565b6117b161219b565b60008060005b848110156110d8578585828181106117d1576117d1613b41565b9050602002013592506117e3836121e8565b600083815260086020526040902060028101549092506118029061223d565b156118475760405162461bcd60e51b81526020600482015260156024820152746e6f7420726561647920746f20776974686472617760581b604482015260640161092a565b611850836122b1565b61185a8285612354565b6040516001600160a01b0385169084907fd964a27d45f595739c13d8b1160b57491050cacf3a2e5602207277d6228f64ee90600090a36001016117b7565b6118a061219b565b600182116118e15760405162461bcd60e51b815260206004820152600e60248201526d0d2dcecc2d8d2c840d8cadccee8d60931b604482015260640161092a565b3460008080855b8015611a95576000190187878281811061190457611904613b41565b905060200201359350611916846121e8565b6000848152600860205260409020925061192f836124e0565b82546003840154600b805460a09290921b918390811061195157611951613b41565b9060005260206000209060030201935083600101548810156119a85760405162461bcd60e51b815260206004820152601060248201526f34b73b30b634b210323ab930ba34b7b760811b604482015260640161092a565b83546119b49088613baa565b96506119c68560010154600019141590565b156119fc576001600160a01b03198116600090815260096020908152604080832085845290915290208054600019019055611a29565b6001600160a01b031981166000908152600a60209081526040808320858452909152902080546000190190555b8215611a3d57611a38866122b1565b611a8e565b6000196001860155611a5085888a612e1c565b7fb3f4c8ca702dbbd32d9a25ce17b1942a5060284d9d69fc4fcac8fb0397891b128a8a898b604051611a859493929190613c14565b60405180910390a15b50506118e8565b5050505050505050565b6060611aaa82612413565b6000611ac160408051602081019091526000815290565b90506000815111611ae15760405180602001604052806000815250610fbc565b80611aeb84612e9f565b604051602001611afc929190613c5a565b6040516020818303038152906040529392505050565b611b1a6129e4565b81600003611b5e5760405162461bcd60e51b8152602060048201526011602482015270185b5bdd5b9d081a5cc81a5b9d985b1a59607a1b604482015260640161092a565b6000828152600c6020908152604080832084845290915290205415611bbd5760405162461bcd60e51b81526020600482015260156024820152746475706c6963617465206275636b6574207479706560581b604482015260640161092a565b60408051606081018252838152602080820184815243838501908152600b8054600181018255600082815295517f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db960039092029182015592517f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dba84015590517f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dbb9092019190915554858352600c82528383208584528252918390209190915581518481529081018390527f6b39e3267efcd6611c8d7d2534c4715dcb4824322b90d85540a3a82967b6e7b791015b60405180910390a15050565b6000611cc161219b565b600082118015611cd9575034611cd78387613c89565b145b611cf55760405162461bcd60e51b815260040161092a90613bbd565b6000611d018686612a93565b9050611d0c81612b2b565b600754600101915060005b83811015611d7657611d298286612b77565b611d338184613baa565b7f1f44b78b04f7c6f80fc97ae8b196d9e9d7a81663114744f18fe5d073cd70ce4a868989604051611d6693929190613b72565b60405180910390a2600101611d17565b50505b949350505050565b611d8961219b565b81611d93816121e8565b6000838152600860205260409020611daa81612c17565b8054600b80546000919083908110611dc457611dc4613b41565b9060005260206000209060030201905080600101548511611df75760405162461bcd60e51b815260040161092a90613be9565b600383015460a01b6001600160a01b0319166000908152600a60209081526040808320858452909152902080546000190190558054611e3890849087612e1c565b857fc599168ac63ff28ec278088a2c424383a36ca26c931eb41af05e014f19252ea48660405161176191815260200190565b6000611e7461219b565b34825185611e829190613c89565b14611e9f5760405162461bcd60e51b815260040161092a90613bbd565b6000611eab8585612a93565b9050611eb681612b2b565b600754600101915060005b8351811015611f5357611eed82858381518110611ee057611ee0613b41565b6020026020010151612b77565b611ef78184613baa565b7f1f44b78b04f7c6f80fc97ae8b196d9e9d7a81663114744f18fe5d073cd70ce4a858381518110611f2a57611f2a613b41565b60200260200101518888604051611f4393929190613b72565b60405180910390a2600101611ec1565b50509392505050565b611f646129e4565b43600b611f718484612a93565b81548110611f8157611f81613b41565b9060005260206000209060030201600201819055507f6b39e3267efcd6611c8d7d2534c4715dcb4824322b90d85540a3a82967b6e7b78282604051611cab929190918252602082015260400190565b611fd861219b565b60008060005b8381101561116f57848482818110611ff857611ff8613b41565b90506020020135925061200a836121e8565b60008381526008602052604090209150612023826124e0565b61202c82612904565b156120705760405162461bcd60e51b81526020600482015260146024820152736e6f7420726561647920746f20756e7374616b6560601b604482015260640161092a565b612079826129a9565b60405183907f11725367022c3ff288940f4b5473aa61c2da6a24af7363a1128ee2401e8983b290600090a2600101611fde565b6120b46129e4565b600019600b6120c38484612a93565b815481106120d3576120d3613b41565b9060005260206000209060030201600201819055507f099df2bf9247b43481cf1b791a4dd5fa1220c40c62940da539082fbcb30241d68282604051611cab929190918252602082015260400190565b61212a6129e4565b6001600160a01b03811661218f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161092a565b61219881612cb9565b50565b600654600160a01b900460ff1615610d995760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161092a565b6121f1816111d8565b6001600160a01b0316336001600160a01b0316146121985760405162461bcd60e51b81526020600482015260096024820152683737ba1037bbb732b960b91b604482015260640161092a565b600060001982036122895760405162461bcd60e51b81526020600482015260166024820152751b9bdd08185b881d5b9cdd185ad95908189d58dad95d60521b604482015260640161092a565b6000612296600a84613baa565b90504381116122a85750600092915050565b43900392915050565b60006122bc826111d8565b90506122cc816000846001612f31565b6122d5826111d8565b600083815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0385168085526003845282852080546000190190558785526002909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6000600b83600001548154811061236d5761236d613b41565b600091825260208220600390910201546040519092506001600160a01b0384169083908381818185875af1925050503d80600081146123c8576040519150601f19603f3d011682016040523d82523d6000602084013e6123cd565b606091505b50509050806117a35760405162461bcd60e51b81526020600482015260126024820152713330b4b632b2103a37903a3930b739b332b960711b604482015260640161092a565b6000818152600260205260409020546001600160a01b03166121985760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161092a565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906124a7826111d8565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6002810154600019146121985760405162461bcd60e51b81526020600482015260126024820152713737ba10309039ba30b5b2b2103a37b5b2b760711b604482015260640161092a565b8154600383015460a01b61253d84612904565b83101561257f5760405162461bcd60e51b815260206004820152601060248201526f34b73b30b634b210323ab930ba34b7b760811b604482015260640161092a565b60006125af600b848154811061259757612597613b41565b90600052602060002090600302016000015485612a93565b90506125ba81612b2b565b60001960018681018290556001600160a01b03199390931660008181526009602090815260408083209783529681528682208054909401909355968390558652600a8152838620918652529220805490920190915550565b60008061261e836111d8565b9050806001600160a01b0316846001600160a01b0316148061266557506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80611d795750836001600160a01b031661267e84610a8c565b6001600160a01b031614949350505050565b826001600160a01b03166126a3826111d8565b6001600160a01b0316146126c95760405162461bcd60e51b815260040161092a90613ca0565b6001600160a01b03821661272b5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161092a565b6127388383836001612f31565b826001600160a01b031661274b826111d8565b6001600160a01b0316146127715760405162461bcd60e51b815260040161092a90613ca0565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61280a826124e0565b8154600383015460a01b6001600160a01b0319808416908216036128405760405162461bcd60e51b815260040161092a90613be9565b600184015460001914612897576001600160a01b03198181166000908152600960208181526040808420878552825280842080546000190190559387168352908152828220858352905220805460010190556128dd565b6001600160a01b03198181166000908152600a60208181526040808420878552825280842080546000190190559387168352908152828220858352905220805460010190555b505060039190910180546bffffffffffffffffffffffff191660a09290921c919091179055565b600181015460009060001981036129565760405162461bcd60e51b81526020600482015260166024820152751b9bdd08185b881d5b9b1bd8dad95908189d58dad95d60521b604482015260640161092a565b6000600b84600001548154811061296f5761296f613b41565b9060005260206000209060030201600101548261298c9190613baa565b905043811161299f575060009392505050565b4390039392505050565b436002820155600381015460a01b6001600160a01b031916600090815260096020908152604080832093548352929052208054600019019055565b6006546001600160a01b03163314610d995760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161092a565b612a46612ffa565b6006805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000828152600c6020908152604080832084845290915281205480612af05760405162461bcd60e51b8152602060048201526013602482015272696e76616c6964206275636b6574207479706560681b604482015260640161092a565b6000198101611d79565b600043600b8381548110612b1057612b10613b41565b90600052602060002090600302016002015411159050919050565b612b3481612afa565b6121985760405162461bcd60e51b8152602060048201526014602482015273696e616374697665206275636b6574207479706560601b604482015260640161092a565b6007805460019081018083556040805160808101825286815260001960208083018281528385019283526001600160a01b0319891660608501818152600097885260088452868820955186559151858901559251600285015551600390930180546bffffffffffffffffffffffff191660a09490941c939093179092558352600a81528183208784529052902080549091019055546115ce90339061304a565b6001810154600019146121985760405162461bcd60e51b81526020600482015260126024820152713737ba1030903637b1b5b2b2103a37b5b2b760711b604482015260640161092a565b805460038201544360019384015560a01b6001600160a01b0319166000818152600a60209081526040808320858452825280832080546000190190559282526009815282822093825292909252902080549091019055565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b612d1361219b565b6006805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612a763390565b816001600160a01b0316836001600160a01b031603612daf5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161092a565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6000612e288383612a93565b9050612e3381612b2b565b600384015460a01b6001600160a01b0319166000908152600a602090815260408083208484529091529020805460010190559092555050565b612e77848484612690565b612e8384848484613064565b6117a35760405162461bcd60e51b815260040161092a90613ce5565b60606000612eac83613162565b60010190506000816001600160401b03811115612ecb57612ecb61382f565b6040519080825280601f01601f191660200182016040528015612ef5576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084612eff57509392505050565b80600114612f815760405162461bcd60e51b815260206004820152601f60248201527f6261746368207472616e73666572206973206e6f7420737570706f7274656400604482015260640161092a565b6001600160a01b0383161580612fa95750600082815260086020526040902060020154600019145b612ff55760405162461bcd60e51b815260206004820152601e60248201527f63616e6e6f74207472616e7366657220756e7374616b656420746f6b656e0000604482015260640161092a565b6117a3565b600654600160a01b900460ff16610d995760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161092a565b6115ce82826040518060200160405280600081525061323a565b60006001600160a01b0384163b1561315a57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906130a8903390899088908890600401613d37565b6020604051808303816000875af19250505080156130e3575060408051601f3d908101601f191682019092526130e091810190613d74565b60015b613140573d808015613111576040519150601f19603f3d011682016040523d82523d6000602084013e613116565b606091505b5080516000036131385760405162461bcd60e51b815260040161092a90613ce5565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611d79565b506001611d79565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106131a15772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106131cd576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106131eb57662386f26fc10000830492506010015b6305f5e1008310613203576305f5e100830492506008015b612710831061321757612710830492506004015b60648310613229576064830492506002015b600a83106109ce5760010192915050565b613244838361326d565b6132516000848484613064565b610bc35760405162461bcd60e51b815260040161092a90613ce5565b6001600160a01b0382166132c35760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161092a565b6000818152600260205260409020546001600160a01b0316156133285760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161092a565b613336600083836001612f31565b6000818152600260205260409020546001600160a01b03161561339b5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161092a565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160a01b038116811461219857600080fd5b6000806040838503121561342e57600080fd5b82359150602083013561344081613406565b809150509250929050565b6001600160e01b03198116811461219857600080fd5b60006020828403121561347357600080fd5b8135610fbc8161344b565b60006020828403121561349057600080fd5b5035919050565b60005b838110156134b257818101518382015260200161349a565b50506000910152565b600081518084526134d3816020860160208601613497565b601f01601f19169290920160200192915050565b602081526000610fbc60208301846134bb565b6000806040838503121561350d57600080fd5b823561351881613406565b946020939093013593505050565b6000806040838503121561353957600080fd5b50508035926020909101359150565b60008060006060848603121561355d57600080fd5b833561356881613406565b9250602084013561357881613406565b929592945050506040919091013590565b80356001600160a01b0319811681146135a157600080fd5b919050565b600080604083850312156135b957600080fd5b823591506135c960208401613589565b90509250929050565b60008083601f8401126135e457600080fd5b5081356001600160401b038111156135fb57600080fd5b6020830191508360208260051b850101111561361657600080fd5b9250929050565b6000806020838503121561363057600080fd5b82356001600160401b0381111561364657600080fd5b613652858286016135d2565b90969095509350505050565b6000602080830181845280855180835260408601915060408160051b87010192508387016000805b838110156136da57888603603f19018552825180518088529088019088880190845b818110156136c45783518352928a0192918a01916001016136a8565b5090975050509386019391860191600101613686565b509398975050505050505050565b6000806000604084860312156136fd57600080fd5b83356001600160401b0381111561371357600080fd5b61371f868287016135d2565b909790965060209590950135949350505050565b60006020828403121561374557600080fd5b8135610fbc81613406565b602080825282518282018190526000919060409081850190868401855b8281101561379c578151805185528681015187860152850151858501526060909301929085019060010161376d565b5091979650505050505050565b600080604083850312156137bc57600080fd5b82356137c781613406565b91506020830135801515811461344057600080fd5b6000806000604084860312156137f157600080fd5b83356001600160401b0381111561380757600080fd5b613813868287016135d2565b9094509250613826905060208501613589565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561386d5761386d61382f565b604052919050565b6000806000806080858703121561388b57600080fd5b843561389681613406565b93506020858101356138a781613406565b93506040860135925060608601356001600160401b03808211156138ca57600080fd5b818801915088601f8301126138de57600080fd5b8135818111156138f0576138f061382f565b613902601f8201601f19168501613845565b9150808252898482850101111561391857600080fd5b808484018584013760008482840101525080935050505092959194509250565b60008060006040848603121561394d57600080fd5b83356001600160401b0381111561396357600080fd5b61396f868287016135d2565b909450925050602084013561398381613406565b809150509250925092565b600080600080608085870312156139a457600080fd5b84359350602085013592506139bb60408601613589565b9396929550929360600135925050565b6000806000606084860312156139e057600080fd5b83359250602080850135925060408501356001600160401b0380821115613a0657600080fd5b818701915087601f830112613a1a57600080fd5b813581811115613a2c57613a2c61382f565b8060051b9150613a3d848301613845565b818152918301840191848101908a841115613a5757600080fd5b938501935b83851015613a7c57613a6d85613589565b82529385019390850190613a5c565b8096505050505050509250925092565b60008060408385031215613a9f57600080fd5b8235613aaa81613406565b9150602083013561344081613406565b600181811c90821680613ace57607f821691505b602082108103613aee57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b600060208284031215613b6957600080fd5b610fbc82613589565b6001600160a01b03199390931683526020830191909152604082015260600190565b634e487b7160e01b600052601160045260246000fd5b808201808211156109ce576109ce613b94565b602080825260129082015271696e76616c696420706172616d657465727360701b604082015260600190565b60208082526011908201527034b73b30b634b21037b832b930ba34b7b760791b604082015260600190565b6060808252810184905260006001600160fb1b03851115613c3457600080fd5b8460051b8087608085013760208301949094525060408101919091520160800192915050565b60008351613c6c818460208801613497565b835190830190613c80818360208801613497565b01949350505050565b80820281158282048414176109ce576109ce613b94565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613d6a908301846134bb565b9695505050505050565b600060208284031215613d8657600080fd5b8151610fbc8161344b56fea264697066735822122033a72ba2419a7cb3b00b4b4de4305d6458e98ea74f8be8cc9c16afc85a97571764736f6c63430008130033`
	_liquidStakingContractABI      = `[
		{
			"inputs": [],
			"stateMutability": "nonpayable",
			"type": "constructor"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "amount",
					"type": "uint256"
				}
			],
			"name": "AmountIncreased",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "approved",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "Approval",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "operator",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "bool",
					"name": "approved",
					"type": "bool"
				}
			],
			"name": "ApprovalForAll",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "amount",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "duration",
					"type": "uint256"
				}
			],
			"name": "BucketTypeActivated",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "amount",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "duration",
					"type": "uint256"
				}
			],
			"name": "BucketTypeDeactivated",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "bytes12",
					"name": "newDelegate",
					"type": "bytes12"
				}
			],
			"name": "DelegateChanged",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "duration",
					"type": "uint256"
				}
			],
			"name": "DurationExtended",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "duration",
					"type": "uint256"
				}
			],
			"name": "Locked",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "uint256[]",
					"name": "tokenIds",
					"type": "uint256[]"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "amount",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "duration",
					"type": "uint256"
				}
			],
			"name": "Merged",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "previousOwner",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "newOwner",
					"type": "address"
				}
			],
			"name": "OwnershipTransferred",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "Paused",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "bytes12",
					"name": "delegate",
					"type": "bytes12"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "amount",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "duration",
					"type": "uint256"
				}
			],
			"name": "Staked",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "Transfer",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "Unlocked",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "Unpaused",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "Unstaked",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "recipient",
					"type": "address"
				}
			],
			"name": "Withdrawal",
			"type": "event"
		},
		{
			"inputs": [],
			"name": "UINT256_MAX",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "UNSTAKE_FREEZE_BLOCKS",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_amount",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "_duration",
					"type": "uint256"
				}
			],
			"name": "activateBucketType",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_amount",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "_duration",
					"type": "uint256"
				}
			],
			"name": "addBucketType",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "approve",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				}
			],
			"name": "balanceOf",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_tokenId",
					"type": "uint256"
				}
			],
			"name": "blocksToUnstake",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_tokenId",
					"type": "uint256"
				}
			],
			"name": "blocksToWithdraw",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_tokenId",
					"type": "uint256"
				}
			],
			"name": "bucketOf",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "amount_",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "duration_",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "unlockedAt_",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "unstakedAt_",
					"type": "uint256"
				},
				{
					"internalType": "bytes12",
					"name": "delegate_",
					"type": "bytes12"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_offset",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "_size",
					"type": "uint256"
				}
			],
			"name": "bucketTypes",
			"outputs": [
				{
					"components": [
						{
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						},
						{
							"internalType": "uint256",
							"name": "duration",
							"type": "uint256"
						},
						{
							"internalType": "uint256",
							"name": "activatedAt",
							"type": "uint256"
						}
					],
					"internalType": "struct BucketType[]",
					"name": "types_",
					"type": "tuple[]"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_tokenId",
					"type": "uint256"
				},
				{
					"internalType": "bytes12",
					"name": "_delegate",
					"type": "bytes12"
				}
			],
			"name": "changeDelegate",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256[]",
					"name": "_tokenIds",
					"type": "uint256[]"
				},
				{
					"internalType": "bytes12",
					"name": "_delegate",
					"type": "bytes12"
				}
			],
			"name": "changeDelegates",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_amount",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "_duration",
					"type": "uint256"
				}
			],
			"name": "deactivateBucketType",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_tokenId",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "_newDuration",
					"type": "uint256"
				}
			],
			"name": "extendDuration",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "getApproved",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_tokenId",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "_newAmount",
					"type": "uint256"
				}
			],
			"name": "increaseAmount",
			"outputs": [],
			"stateMutability": "payable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_amount",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "_duration",
					"type": "uint256"
				}
			],
			"name": "isActiveBucketType",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "operator",
					"type": "address"
				}
			],
			"name": "isApprovedForAll",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_tokenId",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "_duration",
					"type": "uint256"
				}
			],
			"name": "lock",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256[]",
					"name": "_tokenIds",
					"type": "uint256[]"
				},
				{
					"internalType": "uint256",
					"name": "_duration",
					"type": "uint256"
				}
			],
			"name": "lock",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "bytes12[]",
					"name": "_delegates",
					"type": "bytes12[]"
				}
			],
			"name": "lockedVotesTo",
			"outputs": [
				{
					"internalType": "uint256[][]",
					"name": "counts_",
					"type": "uint256[][]"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256[]",
					"name": "tokenIds",
					"type": "uint256[]"
				},
				{
					"internalType": "uint256",
					"name": "_newDuration",
					"type": "uint256"
				}
			],
			"name": "merge",
			"outputs": [],
			"stateMutability": "payable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "name",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "numOfBucketTypes",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "owner",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "ownerOf",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "pause",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "paused",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "renounceOwnership",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "safeTransferFrom",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				},
				{
					"internalType": "bytes",
					"name": "data",
					"type": "bytes"
				}
			],
			"name": "safeTransferFrom",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "operator",
					"type": "address"
				},
				{
					"internalType": "bool",
					"name": "approved",
					"type": "bool"
				}
			],
			"name": "setApprovalForAll",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_duration",
					"type": "uint256"
				},
				{
					"internalType": "bytes12",
					"name": "_delegate",
					"type": "bytes12"
				}
			],
			"name": "stake",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "payable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_amount",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "_duration",
					"type": "uint256"
				},
				{
					"internalType": "bytes12",
					"name": "_delegate",
					"type": "bytes12"
				},
				{
					"internalType": "uint256",
					"name": "_count",
					"type": "uint256"
				}
			],
			"name": "stake",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "firstTokenId_",
					"type": "uint256"
				}
			],
			"stateMutability": "payable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_amount",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "_duration",
					"type": "uint256"
				},
				{
					"internalType": "bytes12[]",
					"name": "_delegates",
					"type": "bytes12[]"
				}
			],
			"name": "stake",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "firstTokenId_",
					"type": "uint256"
				}
			],
			"stateMutability": "payable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "bytes4",
					"name": "interfaceId",
					"type": "bytes4"
				}
			],
			"name": "supportsInterface",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "symbol",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "tokenURI",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "transferFrom",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "newOwner",
					"type": "address"
				}
			],
			"name": "transferOwnership",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256[]",
					"name": "_tokenIds",
					"type": "uint256[]"
				}
			],
			"name": "unlock",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_tokenId",
					"type": "uint256"
				}
			],
			"name": "unlock",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "bytes12[]",
					"name": "_delegates",
					"type": "bytes12[]"
				}
			],
			"name": "unlockedVotesTo",
			"outputs": [
				{
					"internalType": "uint256[][]",
					"name": "counts_",
					"type": "uint256[][]"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "unpause",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_tokenId",
					"type": "uint256"
				}
			],
			"name": "unstake",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256[]",
					"name": "_tokenIds",
					"type": "uint256[]"
				}
			],
			"name": "unstake",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_tokenId",
					"type": "uint256"
				},
				{
					"internalType": "address payable",
					"name": "_recipient",
					"type": "address"
				}
			],
			"name": "withdraw",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256[]",
					"name": "_tokenIds",
					"type": "uint256[]"
				},
				{
					"internalType": "address payable",
					"name": "_recipient",
					"type": "address"
				}
			],
			"name": "withdraw",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		}
	]`

	_adminID = 22
)

var (
	_delegates = []string{
		"delegate0",
		"delegate1",
		"delegate2",
		"delegate3",
		"delegate4",
		"delegate5",
		"delegate6",
	}
)

func TestLiquidStaking(t *testing.T) {
	r := require.New(t)
	// prepare blockchain
	adminID := _adminID
	ctx := context.Background()
	cfg := config.Default
	cfg.Chain.ProducerPrivKey = identityset.PrivateKey(adminID).HexString()
	cfg.Chain.EnableTrielessStateDB = false
	cfg.Genesis.InitBalanceMap[identityset.Address(adminID).String()] = "1000000000000000000000000000"

	bc, sf, dao, ap, indexer := prepareliquidStakingBlockchain(ctx, cfg, r)
	defer func() {
		r.NoError(bc.Stop(ctx))
	}()
	ctx = genesis.WithGenesisContext(context.Background(), bc.Genesis())

	// deploy smart contract
	deployAddr := blockindex.LiquidStakingContractAddress
	param := callParam{
		contractAddr: deployAddr,
		bytecode:     _liquidStakingContractByteCode,
		amount:       big.NewInt(0),
		gasLimit:     20000000,
		gasPrice:     big.NewInt(0),
		sk:           identityset.PrivateKey(adminID),
	}
	contractAddresses := deployContracts(bc, sf, dao, ap, &param, r)
	r.Equal(deployAddr, contractAddresses)
	lsdABI, err := abi.JSON(strings.NewReader(_liquidStakingContractABI))
	r.NoError(err)

	// init bucket type
	bucketTypes := []struct {
		amount   int64
		duration int64
	}{
		{10, 100},
		{10, 10},
		{100, 100},
		{100, 10},
	}
	params := []*callParam{}
	for i := range bucketTypes {
		data, err := lsdABI.Pack("addBucketType", big.NewInt(bucketTypes[i].amount), big.NewInt(bucketTypes[i].duration))
		r.NoError(err)
		param := callParam{
			contractAddr: contractAddresses,
			bytecode:     hex.EncodeToString(data),
			amount:       big.NewInt(0),
			gasLimit:     1000000,
			gasPrice:     big.NewInt(0),
			sk:           identityset.PrivateKey(adminID),
		}
		params = append(params, &param)
	}
	receipts, _ := writeContract(bc, sf, dao, ap, params, r)
	r.Len(receipts, len(params))
	for _, receipt := range receipts {
		r.EqualValues(iotextypes.ReceiptStatus_Success, receipt.Status)
	}

	simpleStake := func(candName string, amount, duration *big.Int) *blockindex.Bucket {
		return stake(lsdABI, bc, sf, dao, ap, contractAddresses, indexer, r, candName, amount, duration)
	}

	t.Run("stake", func(t *testing.T) {
		delegateIdx := 2
		delegate := [12]byte{}
		copy(delegate[:], []byte(_delegates[delegateIdx]))
		data, err := lsdABI.Pack("stake", big.NewInt(10), delegate)
		r.NoError(err)
		param := callParam{
			contractAddr: contractAddresses,
			bytecode:     hex.EncodeToString(data),
			amount:       big.NewInt(10),
			gasLimit:     1000000,
			gasPrice:     big.NewInt(0),
			sk:           identityset.PrivateKey(adminID),
		}
		receipts, blk := writeContract(bc, sf, dao, ap, []*callParam{&param}, r)
		r.Len(receipts, 1)
		r.EqualValues(iotextypes.ReceiptStatus_Success, receipts[0].Status)
		buckets, err := indexer.Buckets()
		r.NoError(err)
		slices.SortFunc(buckets, func(i, j *blockindex.Bucket) bool {
			return i.Index < j.Index
		})
		bt := buckets[len(buckets)-1]
		tokenID := bt.Index
		r.EqualValues(1, bt.Index)
		r.True(bt.AutoStake)
		r.Equal(identityset.Address(delegateIdx).String(), bt.Candidate.String())
		r.EqualValues(identityset.PrivateKey(adminID).PublicKey().Address().String(), bt.Owner.String())
		r.EqualValues(0, bt.StakedAmount.Cmp(big.NewInt(10)))
		r.EqualValues(10*cfg.Genesis.BlockInterval, bt.StakedDuration)
		r.EqualValues(blk.Timestamp().Unix(), bt.CreateTime.Unix())
		r.EqualValues(blk.Timestamp().UTC().Unix(), bt.StakeStartTime.Unix())
		r.True(bt.UnstakeStartTime.IsZero())
		r.EqualValues(10, indexer.CandidateVotes(identityset.Address(delegateIdx).String()).Int64())

		t.Run("unlock", func(t *testing.T) {
			data, err = lsdABI.Pack("unlock0", big.NewInt(int64(bt.Index)))
			r.NoError(err)
			param = callParam{
				contractAddr: contractAddresses,
				bytecode:     hex.EncodeToString(data),
				amount:       big.NewInt(0),
				gasLimit:     1000000,
				gasPrice:     big.NewInt(0),
				sk:           identityset.PrivateKey(adminID),
			}
			receipts, blk = writeContract(bc, sf, dao, ap, []*callParam{&param}, r)
			r.Len(receipts, 1)
			r.EqualValues("", receipts[0].ExecutionRevertMsg())
			r.EqualValues(iotextypes.ReceiptStatus_Success, receipts[0].Status)
			bt, err := indexer.Bucket(uint64(tokenID))
			r.NoError(err)
			r.EqualValues(blk.Timestamp().UTC().Unix(), bt.StakeStartTime.Unix())
			r.EqualValues(10, indexer.CandidateVotes(identityset.Address(delegateIdx).String()).Int64())

			t.Run("unstake", func(t *testing.T) {
				jumpBlocks(bc, 10, r)
				data, err = lsdABI.Pack("unstake", big.NewInt(int64(bt.Index)))
				r.NoError(err)
				param = callParam{
					contractAddr: contractAddresses,
					bytecode:     hex.EncodeToString(data),
					amount:       big.NewInt(0),
					gasLimit:     1000000,
					gasPrice:     big.NewInt(0),
					sk:           identityset.PrivateKey(adminID),
				}
				receipts, blk = writeContract(bc, sf, dao, ap, []*callParam{&param}, r)
				r.Len(receipts, 1)
				r.EqualValues("", receipts[0].ExecutionRevertMsg())
				r.EqualValues(iotextypes.ReceiptStatus_Success, receipts[0].Status)
				bt, err := indexer.Bucket(uint64(tokenID))
				r.NoError(err)
				r.EqualValues(blk.Timestamp().UTC().Unix(), bt.UnstakeStartTime.Unix())
				r.EqualValues(0, indexer.CandidateVotes(identityset.Address(delegateIdx).String()).Int64())

				t.Run("withdraw", func(t *testing.T) {
					// freeze blocks are changed to 10 in test
					jumpBlocks(bc, 10, r)
					tokenID := bt.Index

					addr := common.BytesToAddress(identityset.PrivateKey(adminID).PublicKey().Bytes())
					data, err := lsdABI.Pack("withdraw", big.NewInt(int64(tokenID)), addr)
					r.NoError(err)
					param = callParam{
						contractAddr: contractAddresses,
						bytecode:     hex.EncodeToString(data),
						amount:       big.NewInt(0),
						gasLimit:     1000000,
						gasPrice:     big.NewInt(0),
						sk:           identityset.PrivateKey(adminID),
					}
					receipts, _ = writeContract(bc, sf, dao, ap, []*callParam{&param}, r)
					r.Len(receipts, 1)
					r.EqualValues("", receipts[0].ExecutionRevertMsg())
					r.EqualValues(iotextypes.ReceiptStatus_Success, receipts[0].Status)
					bt, err = indexer.Bucket(uint64(tokenID))
					r.ErrorIs(err, blockindex.ErrBucketInfoNotExist)
				})
			})
		})
	})

	t.Run("lock & unlock", func(t *testing.T) {
		bt := simpleStake("delegate3", big.NewInt(10), big.NewInt(10))
		tokenID := bt.Index

		data, err := lsdABI.Pack("unlock0", big.NewInt(int64(bt.Index)))
		r.NoError(err)
		param = callParam{
			contractAddr: contractAddresses,
			bytecode:     hex.EncodeToString(data),
			amount:       big.NewInt(0),
			gasLimit:     1000000,
			gasPrice:     big.NewInt(0),
			sk:           identityset.PrivateKey(adminID),
		}
		receipts, _ = writeContract(bc, sf, dao, ap, []*callParam{&param}, r)
		r.Len(receipts, 1)
		r.EqualValues("", receipts[0].ExecutionRevertMsg())
		r.EqualValues(iotextypes.ReceiptStatus_Success, receipts[0].Status)

		data, err = lsdABI.Pack("lock", big.NewInt(int64(bt.Index)), big.NewInt(10))
		r.NoError(err)
		param = callParam{
			contractAddr: contractAddresses,
			bytecode:     hex.EncodeToString(data),
			amount:       big.NewInt(0),
			gasLimit:     1000000,
			gasPrice:     big.NewInt(0),
			sk:           identityset.PrivateKey(adminID),
		}
		receipts, _ := writeContract(bc, sf, dao, ap, []*callParam{&param}, r)
		r.Len(receipts, 1)
		r.EqualValues("", receipts[0].ExecutionRevertMsg())
		r.EqualValues(iotextypes.ReceiptStatus_Success, receipts[0].Status)
		bt, err = indexer.Bucket(uint64(tokenID))
		r.NoError(err)
		r.True(bt.AutoStake)
	})
	t.Run("merge", func(t *testing.T) {
		// stake 10 bucket
		candName := "delegate3"
		params := []*callParam{}
		for i := 0; i < 10; i++ {
			delegate := [12]byte{}
			copy(delegate[:], []byte(candName))
			data, err := lsdABI.Pack("stake", big.NewInt(10), delegate)
			r.NoError(err)
			param := callParam{
				contractAddr: contractAddresses,
				bytecode:     hex.EncodeToString(data),
				amount:       big.NewInt(10),
				gasLimit:     1000000,
				gasPrice:     big.NewInt(0),
				sk:           identityset.PrivateKey(adminID),
			}
			params = append(params, &param)
		}
		receipts, _ := writeContract(bc, sf, dao, ap, params, r)
		r.Len(receipts, len(params))
		for _, receipt := range receipts {
			r.EqualValues(iotextypes.ReceiptStatus_Success, receipt.Status)
		}
		buckets, err := indexer.Buckets()
		r.NoError(err)
		slices.SortFunc(buckets, func(i, j *blockindex.Bucket) bool {
			return i.Index < j.Index
		})
		r.True(len(buckets) >= 10)
		// merge
		newBuckets := buckets[len(buckets)-10:]
		tokens := []*big.Int{}
		for _, bucket := range newBuckets {
			tokens = append(tokens, big.NewInt(int64(bucket.Index)))
		}
		data, err := lsdABI.Pack("merge", tokens, big.NewInt(100))
		r.NoError(err)
		param := callParam{
			contractAddr: contractAddresses,
			bytecode:     hex.EncodeToString(data),
			amount:       big.NewInt(0),
			gasLimit:     1000000,
			gasPrice:     big.NewInt(0),
			sk:           identityset.PrivateKey(adminID),
		}
		receipts, _ = writeContract(bc, sf, dao, ap, []*callParam{&param}, r)
		r.Len(receipts, 1)
		r.EqualValues("", receipts[0].ExecutionRevertMsg())
		r.EqualValues(iotextypes.ReceiptStatus_Success, receipts[0].Status)
		for i := range newBuckets {
			if i == 0 {
				bt, err := indexer.Bucket(uint64(newBuckets[i].Index))
				r.NoError(err)
				r.EqualValues(100*cfg.Genesis.BlockInterval, bt.StakedDuration)
			} else {
				_, err := indexer.Bucket(uint64(newBuckets[i].Index))
				r.ErrorIs(err, blockindex.ErrBucketInfoNotExist)
			}
		}
	})

	t.Run("extend duration", func(t *testing.T) {
		// stake
		bt := simpleStake("delegate3", big.NewInt(10), big.NewInt(10))
		tokenID := bt.Index
		r.EqualValues(10*cfg.Genesis.BlockInterval, bt.StakedDuration)
		// extend duration
		data, err := lsdABI.Pack("extendDuration", big.NewInt(int64(tokenID)), big.NewInt(100))
		r.NoError(err)
		param = callParam{
			contractAddr: contractAddresses,
			bytecode:     hex.EncodeToString(data),
			amount:       big.NewInt(0),
			gasLimit:     1000000,
			gasPrice:     big.NewInt(0),
			sk:           identityset.PrivateKey(adminID),
		}
		receipts, _ = writeContract(bc, sf, dao, ap, []*callParam{&param}, r)
		r.Len(receipts, 1)
		r.EqualValues(iotextypes.ReceiptStatus_Success, receipts[0].Status)
		bt, err = indexer.Bucket(uint64(tokenID))
		r.NoError(err)
		r.EqualValues(100*cfg.Genesis.BlockInterval, bt.StakedDuration)
	})

	t.Run("increase amount", func(t *testing.T) {
		bt := simpleStake("delegate4", big.NewInt(10), big.NewInt(10))
		tokenID := bt.Index

		data, err := lsdABI.Pack("increaseAmount", big.NewInt(int64(tokenID)), big.NewInt(100))
		r.NoError(err)
		param = callParam{
			contractAddr: contractAddresses,
			bytecode:     hex.EncodeToString(data),
			amount:       big.NewInt(90),
			gasLimit:     1000000,
			gasPrice:     big.NewInt(0),
			sk:           identityset.PrivateKey(adminID),
		}
		receipts, _ = writeContract(bc, sf, dao, ap, []*callParam{&param}, r)
		r.Len(receipts, 1)
		r.EqualValues("", receipts[0].ExecutionRevertMsg())
		r.EqualValues(iotextypes.ReceiptStatus_Success, receipts[0].Status)
		bt, err = indexer.Bucket(uint64(tokenID))
		r.NoError(err)
		r.EqualValues(100, bt.StakedAmount.Int64())
	})

	t.Run("change delegate", func(t *testing.T) {
		delegateIdx := 5
		bt := simpleStake(_delegates[delegateIdx], big.NewInt(10), big.NewInt(10))
		tokenID := bt.Index
		r.EqualValues(identityset.Address(delegateIdx).String(), bt.Candidate.String())

		delegateIdx = 6
		delegate := [12]byte{}
		copy(delegate[:], []byte(_delegates[delegateIdx]))
		data, err := lsdABI.Pack("changeDelegate", big.NewInt(int64(tokenID)), delegate)
		r.NoError(err)
		param = callParam{
			contractAddr: contractAddresses,
			bytecode:     hex.EncodeToString(data),
			amount:       big.NewInt(0),
			gasLimit:     1000000,
			gasPrice:     big.NewInt(0),
			sk:           identityset.PrivateKey(adminID),
		}
		receipts, _ = writeContract(bc, sf, dao, ap, []*callParam{&param}, r)
		r.Len(receipts, 1)
		r.EqualValues("", receipts[0].ExecutionRevertMsg())
		r.EqualValues(iotextypes.ReceiptStatus_Success, receipts[0].Status)
		bt, err = indexer.Bucket(uint64(tokenID))
		r.NoError(err)
		r.EqualValues(identityset.Address(delegateIdx).String(), bt.Candidate.String())
	})

}

func prepareliquidStakingBlockchain(ctx context.Context, cfg config.Config, r *require.Assertions) (blockchain.Blockchain, factory.Factory, blockdao.BlockDAO, actpool.ActPool, blockindex.LiquidStakingIndexer) {
	defer func() {
		delete(cfg.Plugins, config.GatewayPlugin)
	}()
	cfg.Plugins[config.GatewayPlugin] = true
	cfg.Chain.EnableAsyncIndexWrite = false
	cfg.Genesis.EnableGravityChainVoting = false
	testTriePath, err := testutil.PathOfTempFile("trie")
	r.NoError(err)
	defer testutil.CleanupPath(testTriePath)
	testLiquidStakeIndexerPath, err := testutil.PathOfTempFile("liquidstakeindexer")
	r.NoError(err)
	defer testutil.CleanupPath(testLiquidStakeIndexerPath)

	cfg.Chain.TrieDBPath = testTriePath
	cfg.ActPool.MinGasPriceStr = "0"

	cfg.Genesis.Blockchain.AleutianBlockHeight = 0
	cfg.Genesis.Blockchain.BeringBlockHeight = 0

	cfg.Genesis.HawaiiBlockHeight = 0

	cfg.Genesis.CookBlockHeight = 0
	cfg.Genesis.DardanellesBlockHeight = 0
	cfg.Genesis.DaytonaBlockHeight = 0
	cfg.Genesis.EasterBlockHeight = 0
	cfg.Genesis.FbkMigrationBlockHeight = 0
	cfg.Genesis.FairbankBlockHeight = 0
	cfg.Genesis.GreenlandBlockHeight = 0
	cfg.Genesis.IcelandBlockHeight = 0

	// London is enabled at okhotsk height
	cfg.Genesis.Blockchain.JutlandBlockHeight = 0
	cfg.Genesis.Blockchain.KamchatkaBlockHeight = 0
	cfg.Genesis.Blockchain.LordHoweBlockHeight = 0
	cfg.Genesis.Blockchain.MidwayBlockHeight = 0
	cfg.Genesis.Blockchain.NewfoundlandBlockHeight = 0
	cfg.Genesis.Blockchain.OkhotskBlockHeight = 0

	registry := protocol.NewRegistry()
	acc := account.NewProtocol(rewarding.DepositGas)
	r.NoError(acc.Register(registry))
	rp := rolldpos.NewProtocol(cfg.Genesis.NumCandidateDelegates, cfg.Genesis.NumDelegates, cfg.Genesis.NumSubEpochs)
	r.NoError(rp.Register(registry))
	// create state factory
	var sf factory.Factory
	var daoKV db.KVStore

	factoryCfg := factory.GenerateConfig(cfg.Chain, cfg.Genesis)
	if cfg.Chain.EnableTrielessStateDB {
		if cfg.Chain.EnableStateDBCaching {
			daoKV, err = db.CreateKVStoreWithCache(cfg.DB, cfg.Chain.TrieDBPath, cfg.Chain.StateDBCacheSize)
		} else {
			daoKV, err = db.CreateKVStore(cfg.DB, cfg.Chain.TrieDBPath)
		}
		r.NoError(err)
		sf, err = factory.NewStateDB(factoryCfg, daoKV, factory.RegistryStateDBOption(registry))
	} else {
		sf, err = factory.NewFactory(factoryCfg, db.NewMemKVStore(), factory.RegistryOption(registry))
	}
	r.NoError(err)
	ap, err := actpool.NewActPool(cfg.Genesis, sf, cfg.ActPool)
	r.NoError(err)
	// create indexer
	indexer, err := blockindex.NewIndexer(db.NewMemKVStore(), cfg.Genesis.Hash())
	r.NoError(err)
	cc := cfg.DB
	cc.DbPath = testLiquidStakeIndexerPath
	candNameToOwner := func(name string) (address.Address, error) {
		idx := slices.Index(_delegates, name)
		if idx == -1 {
			return &address.AddrV1{}, errors.New("delegate not found")
		}
		return identityset.Address(idx), nil
	}
	liquidStakeIndexer := blockindex.NewLiquidStakingIndexer(db.NewBoltDB(cc), cfg.Genesis.BlockInterval, candNameToOwner)
	// create BlockDAO
	dao := blockdao.NewBlockDAOInMemForTest([]blockdao.BlockIndexer{sf, indexer, liquidStakeIndexer})
	r.NotNil(dao)
	bc := blockchain.NewBlockchain(
		cfg.Chain,
		cfg.Genesis,
		dao,
		factory.NewMinter(sf, ap),
		blockchain.BlockValidatorOption(block.NewValidator(
			sf,
			protocol.NewGenericValidator(sf, accountutil.AccountState),
		)),
	)
	// reward := rewarding.NewProtocol(cfg.Genesis.Rewarding)
	// r.NoError(reward.Register(registry))

	r.NotNil(bc)
	execution := execution.NewProtocol(dao.GetBlockHash, rewarding.DepositGas)
	r.NoError(execution.Register(registry))
	r.NoError(bc.Start(ctx))

	return bc, sf, dao, ap, liquidStakeIndexer
}

func deployContracts(
	bc blockchain.Blockchain,
	sf factory.Factory,
	dao blockdao.BlockDAO,
	ap actpool.ActPool,
	param *callParam,
	r *require.Assertions,
) (contractAddresses string) {
	sk := param.sk
	bytecode, err := hex.DecodeString(param.bytecode)
	r.NoError(err)
	state, err := accountutil.AccountState(genesis.WithGenesisContext(context.Background(), bc.Genesis()), sf, sk.PublicKey().Address())
	r.NoError(err)
	nonce := state.PendingNonce()
	amount := param.amount
	gasLimit := param.gasLimit
	gasPrice := param.gasPrice
	exec, err := action.NewExecutionWithAccessList(action.EmptyAddress, nonce, amount, gasLimit, gasPrice, bytecode, nil)
	r.NoError(err)
	builder := &action.EnvelopeBuilder{}
	elp := builder.SetAction(exec).
		SetNonce(exec.Nonce()).
		SetGasLimit(gasLimit).
		SetGasPrice(gasPrice).
		Build()
	selp, err := action.Sign(elp, sk)
	r.NoError(err)
	err = ap.Add(context.Background(), selp)
	r.NoError(err)
	selpHash, err := selp.Hash()

	blk, err := bc.MintNewBlock(testutil.TimestampNow())
	r.NoError(err)
	err = bc.CommitBlock(blk)
	r.NoError(err)

	receipt, err := dao.GetReceiptByActionHash(selpHash, blk.Height())
	r.NoError(err)
	r.NotNil(receipt)
	r.Equal(uint64(iotextypes.ReceiptStatus_Success), receipt.Status)

	return receipt.ContractAddress
}

type callParam struct {
	contractAddr string
	bytecode     string
	amount       *big.Int
	gasLimit     uint64
	gasPrice     *big.Int
	sk           crypto.PrivateKey
}

func writeContract(bc blockchain.Blockchain,
	sf factory.Factory,
	dao blockdao.BlockDAO,
	ap actpool.ActPool,
	params []*callParam,
	r *require.Assertions,
) ([]*action.Receipt, *block.Block) {
	nonces := map[string]uint64{}
	hashes := []hash.Hash256{}
	for _, param := range params {
		nonce := uint64(1)
		var ok bool
		sk := param.sk
		executor := sk.PublicKey().Address()
		if nonce, ok = nonces[executor.String()]; !ok {
			state, err := accountutil.AccountState(genesis.WithGenesisContext(context.Background(), bc.Genesis()), sf, executor)
			r.NoError(err)
			nonce = state.PendingNonce()
		} else {
			nonce++
		}
		nonces[executor.String()] = nonce

		amount := param.amount
		gasLimit := param.gasLimit
		gasPrice := param.gasPrice
		bytecode, err := hex.DecodeString(param.bytecode)
		r.NoError(err)
		exec, err := action.NewExecutionWithAccessList(param.contractAddr, nonce, amount, gasLimit, gasPrice, bytecode, nil)
		r.NoError(err)
		builder := &action.EnvelopeBuilder{}
		elp := builder.SetAction(exec).
			SetNonce(exec.Nonce()).
			SetGasLimit(gasLimit).
			SetGasPrice(gasPrice).
			Build()
		selp, err := action.Sign(elp, sk)
		r.NoError(err)
		err = ap.Add(context.Background(), selp)
		r.NoError(err)
		selpHash, err := selp.Hash()
		hashes = append(hashes, selpHash)
	}

	blk, err := bc.MintNewBlock(testutil.TimestampNow())
	r.NoError(err)
	err = bc.CommitBlock(blk)
	r.NoError(err)

	receipts := []*action.Receipt{}
	for _, hash := range hashes {
		receipt, err := dao.GetReceiptByActionHash(hash, blk.Height())
		r.NoError(err)
		receipts = append(receipts, receipt)
	}
	return receipts, blk
}

func jumpBlocks(bc blockchain.Blockchain, count int, r *require.Assertions) {
	for i := 0; i < count; i++ {
		blk, err := bc.MintNewBlock(testutil.TimestampNow())
		r.NoError(err)
		err = bc.CommitBlock(blk)
		r.NoError(err)
	}
}

func stake(lsdABI abi.ABI, bc blockchain.Blockchain, sf factory.Factory, dao blockdao.BlockDAO, ap actpool.ActPool, contractAddresses string, indexer blockindex.LiquidStakingIndexer, r *require.Assertions, candName string, amount, duration *big.Int) *blockindex.Bucket {
	delegate := [12]byte{}
	copy(delegate[:], []byte(candName))
	data, err := lsdABI.Pack("stake", duration, delegate)
	r.NoError(err)
	param := callParam{
		contractAddr: contractAddresses,
		bytecode:     hex.EncodeToString(data),
		amount:       amount,
		gasLimit:     1000000,
		gasPrice:     big.NewInt(0),
		sk:           identityset.PrivateKey(_adminID),
	}
	receipts, _ := writeContract(bc, sf, dao, ap, []*callParam{&param}, r)
	r.Len(receipts, 1)
	r.EqualValues(iotextypes.ReceiptStatus_Success, receipts[0].Status)
	buckets, err := indexer.Buckets()
	r.NoError(err)
	slices.SortFunc(buckets, func(i, j *blockindex.Bucket) bool {
		return i.Index < j.Index
	})
	bt := buckets[len(buckets)-1]
	return bt
}
